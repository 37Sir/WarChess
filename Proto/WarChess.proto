package com.zyd.common.proto.client;

/////////////////////////////////////// request ////////////////////////////////////

// 匹配玩家请求
message PlayerMatchRequest{
}

// 匹配玩家请求返回
message PlayerMatchResponse{
	
}

// 取消匹配请求
message PlayerCancelMatchRequest{

}

message PlayerCancelMatchResponse{

}

/** 玩家战斗的桢信息请求*/
message PlayerBattleMesRequest{
	/** 操作桢信息*/
	optional BattleMes battleMes = 2;
}

/** 玩家战斗的桢信息返回 */
message PlayerBattleMesResponse{
	/** 是否操作成功*/
	required bool res = 1;
	/** 如果操作失败,失败的原因*/
	optional string error = 2;
}

/** 玩家战斗结束请求 */
message FairBattleLevelEndRequest{

	/** 是否主动投降*/
	optional bool isGiveUp = 2;
}

/** 玩家战斗结束返回 */
message FairBattleLevelEndResponse{
	
}



/** 玩家进入游戏后准备完成请求 */
message PlayerReadyRequest{
	
}

/** 玩家进入游戏后准备完成返回 */
message PlayerReadyResponse{
	
}



/** 玩家走棋图像渲染完成的请求*/
message PlayerPaintingEndRequest{
	
}

/** 玩家走棋图像渲染完成的返回*/
message PlayerPaintingEndResponse{

}

/** 玩家请求所有桢信息请求*/
message PlayerRequireBattleMesAgainRequest{
	/** 请求开始桢的桢号*/
	required int32 startPlayNum = 1;
	/** 房间号*/
	optional int64 roomId = 2;
}

/** 玩家请求所有桢信息返回*/
message PlayerRequireBattleMesAgainResponse{
	/** 开始信息*/
	optional PlayerStartPush playerSatrt = 1;
	/** 桢信息*/
	repeated BattleMes battleMes = 2;
}

/** 玩家查询是否有正在战斗,如果有,则返回roomId*/
message CheckPlayerFairBattleExistRequest{
	
}

message CheckPlayerFairBattleExistResponse{
	/** 是否存在*/
	required bool isExist = 1 ;
	/** roomId*/
	optional int64 roomId = 2;	
}



/////////////////////////////////////// push ////////////////////////////////////
/** 玩家可以开始下一轮倒计时了*/
message PlayNextPush{
	
}

/** 玩家战斗桢信息推送,包括开始和战斗过程*/
message ServerBattleMesPush{
	/** 当前服务器时间,操作时间*/
	required int64 currentTime = 1;
	/** 服务器下一步更新时间*/
	required int64 nextTime = 2;
	/** 桢信息*/
	required BattleMes battleMes = 3;
}


/** 匹配完成,玩家进入匹配房间推送 */
message PlayerStartPush{
	/** 游戏玩家信息*/
	repeated PlayerMes playerMes = 1;
	/** 第一个操作玩家userId */
	optional int32 userId = 3;
	/** 房间id */
	optional int64 roomId = 4;
}

/** 游戏正式开始推送 */
message PlayerReadyFinishedPush{

}


/** 玩家游戏结束推送*/
message PlayerEndPush{
	optional int32 winUserId = 1; //胜利玩家ID
	/** 所有的桢信息,测试用于战斗回放*/
	repeated BattleMes battleMes = 2;
	/** 0 正常结束 1 己方投降 2 对方投降 3 己方超时 4 对方超时 5 游戏错误 6 逼和 7 和局*/
	optional int32 result = 3;
}

/////////////////////////////////////// message ////////////////////////////////////

/** 桢信息 */
message BattleMes{
	optional int32 PlayNum = 1; //回合数
	optional int32 from =2 ; //初始位置
	optional int32 to = 3 ; //移动位置
	optional int32 userId = 4; //操作的玩家ID 
	
}

/** 战斗玩家信息*/
message PlayerMes{
	/** 玩家id*/
	required int32 userId = 1;
	
	optional string userName = 2;

}

message OnePlayerReady {
	required int32 userId = 1;
}

message PlayerNotReady{
	repeated int32 userId = 1;
}
