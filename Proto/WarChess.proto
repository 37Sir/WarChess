package com.zyd.common.proto.client;

/////////////////////////////////////// request ////////////////////////////////////
//新模式玩家行动的请求
message PlayerActiveRequest {
	optional ActiveInfo activeInfo= 1; //玩家行动信息

}
message PlayerActiveResponse {

}
//玩家行动信息
message ActiveInfo {
	optional bool isCall = 1; //是否是召唤，false是移动
	optional MoveInfo moveInfo = 2; //移动的信息
	optional CallInfo callInfo =3;  //召唤的信息
}
//玩家移动信息
message MoveInfo{
	optional int32 from = 1;
	optional int32 to = 2;
	optional int32 userId =3;//移动方ID
}
//玩家召唤信息
message CallInfo{
	optional int32 index =1; //召唤棋子的位置
	optional int32 type = 2; //召唤棋子的类型
	optional int32 userId = 3; //召唤方ID
}
//新模式玩家主动结束回合的请求
message PlayerInitiativeEndRequest{
	
}
//新模式玩家主动结束回合的请求
message PlayerInitiativeEndResponse{
	
}
//玩家交互的请求
message PlayerMutuallyRequest{
	optional int32 type = 1; //交互的类型（1为悔棋2为和局）
}
//玩家交互的返回
message PlayerMutuallyResponse{
}
//玩家交互的反馈
message PlayerMutuallyFeedbackRequest {
	optional bool isAgree = 1;
}
//玩家交互反馈的返回
message PlayerMutuallyFeedbackResponse{

}
// 匹配玩家请求
message PlayerMatchRequest{
	optional int32 type = 1; //0普通匹配 1新模式匹配 
}

// 匹配玩家请求返回
message PlayerMatchResponse{
	
}
// 取消匹配请求
message PlayerCancelMatchRequest{
	optional int32 type = 1; //0为普通准备，1为新模式

}

message PlayerCancelMatchResponse{

}

/** 玩家游戏的回合信息请求*/
message PlayerBattleMesRequest{
	/** 操作回合信息*/
	optional BattleMes battleMes = 2;
}

/** 玩家游戏的回合信息返回 */
message PlayerBattleMesResponse{
	/** 是否操作成功*/
	required bool res = 1;
	/** 如果操作失败,失败的原因*/
	optional string error = 2;
}

/** 玩家游戏结束请求 */
message FairBattleLevelEndRequest{

	/** 是否主动投降*/
	optional bool isGiveUp = 2;
}

/** 玩家游戏结束返回 */
message FairBattleLevelEndResponse{
	
}



/** 玩家进入游戏后准备完成请求 */
message PlayerReadyRequest{
	optional int32 type =1; //0为普通准备，1为新模式
	
}

/** 玩家进入游戏后准备完成返回 */
message PlayerReadyResponse{
	
}



/** 玩家走棋图像渲染完成的请求*/
message PlayerPaintingEndRequest{
	optional int32 type = 1; //0为普通模式 1为新模式	
}

/** 玩家走棋图像渲染完成的返回*/
message PlayerPaintingEndResponse{

}

/** 玩家请求所有桢信息请求*/
message PlayerRequireBattleMesAgainRequest{
	/** 请求开始桢的桢号*/
	required int32 startPlayNum = 1;
	/** 房间号*/
	optional int64 roomId = 2;
}

/** 玩家请求所有桢信息返回*/
message PlayerRequireBattleMesAgainResponse{
	/** 开始信息*/
	optional PlayerStartPush playerSatrt = 1;
	/** 桢信息*/
	repeated BattleMes battleMes = 2;
}

/** 玩家查询是否有正在战斗,如果有,则返回roomId*/
message CheckPlayerFairBattleExistRequest{
	
}

message CheckPlayerFairBattleExistResponse{
	/** 是否存在*/
	required bool isExist = 1 ;
	/** roomId*/
	optional int64 roomId = 2;	
}



/////////////////////////////////////// push ////////////////////////////////////
/**新模式开局动画播放完毕*/
message PlayerPaintingOverPush{

}
/**新模式玩家可以执行转场动画push*/
message PlayerCanPaintingPush{
	
}
/**新模式玩家能执行下一个棋子移动的push*/
message PlayerCanNextPush{

}
/**新模式玩家行动信息推送*/
message NewServerBattleMesPush {
	optional ActiveInfo activeInfo = 1;
}
/**玩家悔棋的信息*/
message PlayerUndoInfoPush {
	repeated UndoInfo undoInfo = 1;//一回合悔棋信息
}
//玩家交互请求的推送
message PlayerUndoPush {
	optional int32 type = 1; //1为悔棋 2为和局
}
//玩家同意请求的推送
message PlayerAgreePush {

}
//玩家不同意请求的推送
message PlayerNotAgreePush {

}

message UndoInfo {
	optional BattleMes battleMes = 1;
	optional bool isEat= 2 ; //是否有棋子被吃
	optional int32  type = 3 ; //被吃棋子类型信息
	optional int32 userId = 4;//操作方ID	
}
/** 悔棋可以开始下一轮倒计时了*/
message PlayUndoNextPush{
	
}
/** 玩家可以开始下一轮倒计时了*/
message PlayNextPush{
	
}

/** 玩家战斗桢信息推送,包括开始和战斗过程*/
message ServerBattleMesPush{
	/** 当前服务器时间,操作时间*/
	required int64 currentTime = 1;
	/** 服务器下一步更新时间*/
	required int64 nextTime = 2;
	/** 桢信息*/
	required BattleMes battleMes = 3;
}


/** 匹配完成,玩家进入准备的推送 */
message PlayerStartPush{
	/** 游戏玩家信息*/
	repeated PlayerMes playerMes = 1;
	/** 第一个操作玩家userId */
	optional int32 userId = 3;
	/** 房间id */
	optional int64 roomId = 4;
}

/** 游戏正式开始推送 */
message PlayerReadyFinishedPush{

}


/** 玩家游戏结束推送*/
message PlayerEndPush{
	optional int32 winUserId = 1; //胜利玩家ID
	/** 所有的桢信息,测试用于战斗回放*/
	repeated BattleMes battleMes = 2;
	/** 0 正常结束 1 己方投降 2 对方投降 3 己方超时 4 对方超时 5 游戏错误 6 逼和 7 和局*/
	optional int32 result = 3;
	optional int32 winRank = 4 ; //赢家加的分数
	optional int32 loseRank = 5; //输家输的分数
}

/////////////////////////////////////// message ////////////////////////////////////

/** 桢信息 */
message BattleMes{
	optional int32 PlayNum = 1; //回合数
	optional int32 from =2 ; //初始位置
	optional int32 to = 3 ; //移动位置
	optional int32 userId = 4; //操作的玩家ID 
	optional int32 promption = 5; //兵升变信息：-1没有，其余：为兵升变后的棋子
	
}

/** 游戏玩家信息*/
message PlayerMes{
	/** 玩家id*/
	required int32 userId = 1;	
	optional string userName = 2;
	optional bool isWinning = 3; //true:连胜 false : 连跪
	optional int32 count = 4 ; //玩家连胜或者连负次数
}

message OnePlayerReady {
	required int32 userId = 1;
}

message PlayerNotReady{
	repeated int32 userId = 1;
}
