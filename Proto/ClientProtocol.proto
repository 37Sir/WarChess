package com.zyd.common.proto.client;

option optimize_for = SPEED;

message MessageHeaderRequest {
  optional string name = 1;
  optional MessageHeaderInfo userInfo = 2;
  optional string requestToken = 3;
}

enum EDeviceType {
  None = 0;
  IOS = 1;
  Android = 2;
}

message MessageHeaderInfo {
  optional string userToken = 1;
  optional EDeviceType userDevice = 2 [default = None];
  optional string requestToken = 4;
  //客户端不传，服务器自己获取
  optional string clientIp = 5;
  optional int32 userId = 7;
  optional string sign = 90; //md5Str(userId+userToken+version+privateKey)
  optional string ext = 91; //md5Str
}

message MessageHeaderResponse {
  optional int32 error = 1;
  optional string name = 2;
  optional string requestToken = 3;
}

enum ErrorCode{
	SERVER_ERROR = 1;
	SHOP_ITEM_WRONG = 17;
	
	PLAYER_RMB_NOT_ENOUGH = 21;
	PLAYER_GOLD_NOT_ENOUGH = 22;
	
	PARAMETER_NOT_CORRECT = 50;
	
	SYSCONFIG_NOT_CORRECT = 51;
	HACKER_ERROR = 55;		//md5验证失败

	NOT_GET_LOCK = 300;
	ACTIVATION_CODE_ERROR = 301;

	PLAYER_NOT_MATCH_SUCCESS = 400;
	PLAYER_NOT_START = 401;
	PLAYER_ROOM_NOT_HAVA = 402;
	PLAYER_CAN_NOT_UNDO = 403; //不满足悔棋条件
	
	DUPLICATE_REQUEST = 700;
	VERSION_ERROR = 995;
	DEVICE_TYPE_NOT_CORRECT = 998;
	NOT_HAVE_LAST_RESPONSE = 99999;
	SERVER_MAINTENACE = 100000;	 			//服务器维护状态
	
}

enum RpcErrorCode {
  UNKNOWN = -1;
  INVALID_PROTOCOL = -2;
  INVALID_ARG = -3;
  TIMEOUT = -4;
  SERVER_BUSY = -5;
  PUSHTIMEOUT = -6; //客户端PUSH的超时
}
message LoginRequest{
	optional string userName = 1;
}

message LoginResponse{
	optional PlayerInfo playerInfo = 1;
	optional string sign = 2;
}

message PlayerInfo {
	optional string userName = 1; 
	optional int32 userId = 2;
	optional int32 rank = 3; //玩家分数
	optional int32 winning = 4 ; //玩家连胜场数
	optional int32 losing = 5; //玩家连输场数
	optional int32 winCount = 6 ; //玩家胜利场数
	optional int32 loseCount = 7; //玩家输的场数
	optional int32 draw = 8 ; //玩家和局场数
	optional double firstWin = 9 ; //玩家先手胜率
	optional int32 userRank = 10 ; //玩家排行
	optional int32 allCount = 11; //玩家总局数
}

//排行榜请求
message PlayerRankListRequest{

}

//排行版返回
message PlayerRankListResponse {
	repeated RankInfo rankInfo = 1;//排行版信息
	optional int32 rank = 2; //玩家自己的rank分
	optional int32 userRank = 3; //玩家自己排名
}

message RankInfo {
	optional int32 rank = 1; //rank分数
	optional string name = 2; //玩家姓名
	optional int32 ranking = 3 ; //排行名次
}

//获取玩家数据请求
message GetPlayerInfoRequest{
}
message GetPlayerInfoResponse{
	optional PlayerInfo playerInfo = 1;
}
//获取玩家排名
message GetPlayerRankRequest{

}
message GetPlayerRankResopnse{
	optional int32 rank = 1; 
}
