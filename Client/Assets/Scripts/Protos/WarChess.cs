// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.zyd.common.proto.client {
  
  public static partial class WarChess {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static WarChess() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class PlayerActiveRequest : pb::GeneratedMessageLite<PlayerActiveRequest, PlayerActiveRequest.Builder> {
    private PlayerActiveRequest() { }
    private static readonly PlayerActiveRequest defaultInstance = new PlayerActiveRequest().MakeReadOnly();
    private static readonly string[] _playerActiveRequestFieldNames = new string[] { "activeInfo" };
    private static readonly uint[] _playerActiveRequestFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerActiveRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerActiveRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ActiveInfoFieldNumber = 1;
    private bool hasActiveInfo;
    private global::com.zyd.common.proto.client.ActiveInfo activeInfo_;
    public bool HasActiveInfo {
      get { return hasActiveInfo; }
    }
    public global::com.zyd.common.proto.client.ActiveInfo ActiveInfo {
      get { return activeInfo_ ?? global::com.zyd.common.proto.client.ActiveInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerActiveRequestFieldNames;
      if (hasActiveInfo) {
        output.WriteMessage(1, field_names[0], ActiveInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasActiveInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ActiveInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasActiveInfo) hash ^= activeInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerActiveRequest other = obj as PlayerActiveRequest;
      if (other == null) return false;
      if (hasActiveInfo != other.hasActiveInfo || (hasActiveInfo && !activeInfo_.Equals(other.activeInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerActiveRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerActiveRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerActiveRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerActiveRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerActiveRequest result;
      
      private PlayerActiveRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerActiveRequest original = result;
          result = new PlayerActiveRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerActiveRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerActiveRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerActiveRequest.DefaultInstance; }
      }
      
      public override PlayerActiveRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerActiveRequest) {
          return MergeFrom((PlayerActiveRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerActiveRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerActiveRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasActiveInfo) {
          MergeActiveInfo(other.ActiveInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerActiveRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerActiveRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.zyd.common.proto.client.ActiveInfo.Builder subBuilder = global::com.zyd.common.proto.client.ActiveInfo.CreateBuilder();
              if (result.hasActiveInfo) {
                subBuilder.MergeFrom(ActiveInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActiveInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasActiveInfo {
       get { return result.hasActiveInfo; }
      }
      public global::com.zyd.common.proto.client.ActiveInfo ActiveInfo {
        get { return result.ActiveInfo; }
        set { SetActiveInfo(value); }
      }
      public Builder SetActiveInfo(global::com.zyd.common.proto.client.ActiveInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActiveInfo = true;
        result.activeInfo_ = value;
        return this;
      }
      public Builder SetActiveInfo(global::com.zyd.common.proto.client.ActiveInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActiveInfo = true;
        result.activeInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActiveInfo(global::com.zyd.common.proto.client.ActiveInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActiveInfo &&
            result.activeInfo_ != global::com.zyd.common.proto.client.ActiveInfo.DefaultInstance) {
            result.activeInfo_ = global::com.zyd.common.proto.client.ActiveInfo.CreateBuilder(result.activeInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.activeInfo_ = value;
        }
        result.hasActiveInfo = true;
        return this;
      }
      public Builder ClearActiveInfo() {
        PrepareBuilder();
        result.hasActiveInfo = false;
        result.activeInfo_ = null;
        return this;
      }
    }
    static PlayerActiveRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerActiveResponse : pb::GeneratedMessageLite<PlayerActiveResponse, PlayerActiveResponse.Builder> {
    private PlayerActiveResponse() { }
    private static readonly PlayerActiveResponse defaultInstance = new PlayerActiveResponse().MakeReadOnly();
    private static readonly string[] _playerActiveResponseFieldNames = new string[] {  };
    private static readonly uint[] _playerActiveResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerActiveResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerActiveResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerActiveResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerActiveResponse other = obj as PlayerActiveResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerActiveResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerActiveResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerActiveResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerActiveResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerActiveResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerActiveResponse result;
      
      private PlayerActiveResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerActiveResponse original = result;
          result = new PlayerActiveResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerActiveResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerActiveResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerActiveResponse.DefaultInstance; }
      }
      
      public override PlayerActiveResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerActiveResponse) {
          return MergeFrom((PlayerActiveResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerActiveResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerActiveResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerActiveResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerActiveResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerActiveResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class ActiveInfo : pb::GeneratedMessageLite<ActiveInfo, ActiveInfo.Builder> {
    private ActiveInfo() { }
    private static readonly ActiveInfo defaultInstance = new ActiveInfo().MakeReadOnly();
    private static readonly string[] _activeInfoFieldNames = new string[] { "callInfo", "isCall", "moveInfo" };
    private static readonly uint[] _activeInfoFieldTags = new uint[] { 26, 8, 18 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ActiveInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActiveInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsCallFieldNumber = 1;
    private bool hasIsCall;
    private bool isCall_;
    public bool HasIsCall {
      get { return hasIsCall; }
    }
    public bool IsCall {
      get { return isCall_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int MoveInfoFieldNumber = 2;
    private bool hasMoveInfo;
    private global::com.zyd.common.proto.client.MoveInfo moveInfo_;
    public bool HasMoveInfo {
      get { return hasMoveInfo; }
    }
    public global::com.zyd.common.proto.client.MoveInfo MoveInfo {
      get { return moveInfo_ ?? global::com.zyd.common.proto.client.MoveInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int CallInfoFieldNumber = 3;
    private bool hasCallInfo;
    private global::com.zyd.common.proto.client.CallInfo callInfo_;
    public bool HasCallInfo {
      get { return hasCallInfo; }
    }
    public global::com.zyd.common.proto.client.CallInfo CallInfo {
      get { return callInfo_ ?? global::com.zyd.common.proto.client.CallInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _activeInfoFieldNames;
      if (hasIsCall) {
        output.WriteBool(1, field_names[1], IsCall);
      }
      if (hasMoveInfo) {
        output.WriteMessage(2, field_names[2], MoveInfo);
      }
      if (hasCallInfo) {
        output.WriteMessage(3, field_names[0], CallInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsCall) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsCall);
        }
        if (hasMoveInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, MoveInfo);
        }
        if (hasCallInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CallInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasIsCall) hash ^= isCall_.GetHashCode();
      if (hasMoveInfo) hash ^= moveInfo_.GetHashCode();
      if (hasCallInfo) hash ^= callInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ActiveInfo other = obj as ActiveInfo;
      if (other == null) return false;
      if (hasIsCall != other.hasIsCall || (hasIsCall && !isCall_.Equals(other.isCall_))) return false;
      if (hasMoveInfo != other.hasMoveInfo || (hasMoveInfo && !moveInfo_.Equals(other.moveInfo_))) return false;
      if (hasCallInfo != other.hasCallInfo || (hasCallInfo && !callInfo_.Equals(other.callInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ActiveInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActiveInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ActiveInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ActiveInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActiveInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActiveInfo result;
      
      private ActiveInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ActiveInfo original = result;
          result = new ActiveInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActiveInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ActiveInfo DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.ActiveInfo.DefaultInstance; }
      }
      
      public override ActiveInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ActiveInfo) {
          return MergeFrom((ActiveInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActiveInfo other) {
        if (other == global::com.zyd.common.proto.client.ActiveInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsCall) {
          IsCall = other.IsCall;
        }
        if (other.HasMoveInfo) {
          MergeMoveInfo(other.MoveInfo);
        }
        if (other.HasCallInfo) {
          MergeCallInfo(other.CallInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_activeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _activeInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsCall = input.ReadBool(ref result.isCall_);
              break;
            }
            case 18: {
              global::com.zyd.common.proto.client.MoveInfo.Builder subBuilder = global::com.zyd.common.proto.client.MoveInfo.CreateBuilder();
              if (result.hasMoveInfo) {
                subBuilder.MergeFrom(MoveInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MoveInfo = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.zyd.common.proto.client.CallInfo.Builder subBuilder = global::com.zyd.common.proto.client.CallInfo.CreateBuilder();
              if (result.hasCallInfo) {
                subBuilder.MergeFrom(CallInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CallInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasIsCall {
        get { return result.hasIsCall; }
      }
      public bool IsCall {
        get { return result.IsCall; }
        set { SetIsCall(value); }
      }
      public Builder SetIsCall(bool value) {
        PrepareBuilder();
        result.hasIsCall = true;
        result.isCall_ = value;
        return this;
      }
      public Builder ClearIsCall() {
        PrepareBuilder();
        result.hasIsCall = false;
        result.isCall_ = false;
        return this;
      }
      
      public bool HasMoveInfo {
       get { return result.hasMoveInfo; }
      }
      public global::com.zyd.common.proto.client.MoveInfo MoveInfo {
        get { return result.MoveInfo; }
        set { SetMoveInfo(value); }
      }
      public Builder SetMoveInfo(global::com.zyd.common.proto.client.MoveInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMoveInfo = true;
        result.moveInfo_ = value;
        return this;
      }
      public Builder SetMoveInfo(global::com.zyd.common.proto.client.MoveInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMoveInfo = true;
        result.moveInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMoveInfo(global::com.zyd.common.proto.client.MoveInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMoveInfo &&
            result.moveInfo_ != global::com.zyd.common.proto.client.MoveInfo.DefaultInstance) {
            result.moveInfo_ = global::com.zyd.common.proto.client.MoveInfo.CreateBuilder(result.moveInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.moveInfo_ = value;
        }
        result.hasMoveInfo = true;
        return this;
      }
      public Builder ClearMoveInfo() {
        PrepareBuilder();
        result.hasMoveInfo = false;
        result.moveInfo_ = null;
        return this;
      }
      
      public bool HasCallInfo {
       get { return result.hasCallInfo; }
      }
      public global::com.zyd.common.proto.client.CallInfo CallInfo {
        get { return result.CallInfo; }
        set { SetCallInfo(value); }
      }
      public Builder SetCallInfo(global::com.zyd.common.proto.client.CallInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCallInfo = true;
        result.callInfo_ = value;
        return this;
      }
      public Builder SetCallInfo(global::com.zyd.common.proto.client.CallInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCallInfo = true;
        result.callInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCallInfo(global::com.zyd.common.proto.client.CallInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCallInfo &&
            result.callInfo_ != global::com.zyd.common.proto.client.CallInfo.DefaultInstance) {
            result.callInfo_ = global::com.zyd.common.proto.client.CallInfo.CreateBuilder(result.callInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.callInfo_ = value;
        }
        result.hasCallInfo = true;
        return this;
      }
      public Builder ClearCallInfo() {
        PrepareBuilder();
        result.hasCallInfo = false;
        result.callInfo_ = null;
        return this;
      }
    }
    static ActiveInfo() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class MoveInfo : pb::GeneratedMessageLite<MoveInfo, MoveInfo.Builder> {
    private MoveInfo() { }
    private static readonly MoveInfo defaultInstance = new MoveInfo().MakeReadOnly();
    private static readonly string[] _moveInfoFieldNames = new string[] { "from", "to", "userId" };
    private static readonly uint[] _moveInfoFieldTags = new uint[] { 8, 16, 24 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override MoveInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MoveInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int FromFieldNumber = 1;
    private bool hasFrom;
    private int from_;
    public bool HasFrom {
      get { return hasFrom; }
    }
    public int From {
      get { return from_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ToFieldNumber = 2;
    private bool hasTo;
    private int to_;
    public bool HasTo {
      get { return hasTo; }
    }
    public int To {
      get { return to_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 3;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _moveInfoFieldNames;
      if (hasFrom) {
        output.WriteInt32(1, field_names[0], From);
      }
      if (hasTo) {
        output.WriteInt32(2, field_names[1], To);
      }
      if (hasUserId) {
        output.WriteInt32(3, field_names[2], UserId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, From);
        }
        if (hasTo) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, To);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, UserId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasFrom) hash ^= from_.GetHashCode();
      if (hasTo) hash ^= to_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      MoveInfo other = obj as MoveInfo;
      if (other == null) return false;
      if (hasFrom != other.hasFrom || (hasFrom && !from_.Equals(other.from_))) return false;
      if (hasTo != other.hasTo || (hasTo && !to_.Equals(other.to_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static MoveInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MoveInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(MoveInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<MoveInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MoveInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MoveInfo result;
      
      private MoveInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          MoveInfo original = result;
          result = new MoveInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MoveInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override MoveInfo DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.MoveInfo.DefaultInstance; }
      }
      
      public override MoveInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is MoveInfo) {
          return MergeFrom((MoveInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MoveInfo other) {
        if (other == global::com.zyd.common.proto.client.MoveInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrom) {
          From = other.From;
        }
        if (other.HasTo) {
          To = other.To;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_moveInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _moveInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFrom = input.ReadInt32(ref result.from_);
              break;
            }
            case 16: {
              result.hasTo = input.ReadInt32(ref result.to_);
              break;
            }
            case 24: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasFrom {
        get { return result.hasFrom; }
      }
      public int From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(int value) {
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = 0;
        return this;
      }
      
      public bool HasTo {
        get { return result.hasTo; }
      }
      public int To {
        get { return result.To; }
        set { SetTo(value); }
      }
      public Builder SetTo(int value) {
        PrepareBuilder();
        result.hasTo = true;
        result.to_ = value;
        return this;
      }
      public Builder ClearTo() {
        PrepareBuilder();
        result.hasTo = false;
        result.to_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
    }
    static MoveInfo() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class CallInfo : pb::GeneratedMessageLite<CallInfo, CallInfo.Builder> {
    private CallInfo() { }
    private static readonly CallInfo defaultInstance = new CallInfo().MakeReadOnly();
    private static readonly string[] _callInfoFieldNames = new string[] { "index", "type", "userId" };
    private static readonly uint[] _callInfoFieldTags = new uint[] { 8, 16, 24 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override CallInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CallInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IndexFieldNumber = 1;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 3;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _callInfoFieldNames;
      if (hasIndex) {
        output.WriteInt32(1, field_names[0], Index);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[1], Type);
      }
      if (hasUserId) {
        output.WriteInt32(3, field_names[2], UserId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Index);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, UserId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasIndex) hash ^= index_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CallInfo other = obj as CallInfo;
      if (other == null) return false;
      if (hasIndex != other.hasIndex || (hasIndex && !index_.Equals(other.index_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CallInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CallInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(CallInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<CallInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CallInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CallInfo result;
      
      private CallInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          CallInfo original = result;
          result = new CallInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CallInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CallInfo DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.CallInfo.DefaultInstance; }
      }
      
      public override CallInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CallInfo) {
          return MergeFrom((CallInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CallInfo other) {
        if (other == global::com.zyd.common.proto.client.CallInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_callInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _callInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
    }
    static CallInfo() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerInitiativeEndRequest : pb::GeneratedMessageLite<PlayerInitiativeEndRequest, PlayerInitiativeEndRequest.Builder> {
    private PlayerInitiativeEndRequest() { }
    private static readonly PlayerInitiativeEndRequest defaultInstance = new PlayerInitiativeEndRequest().MakeReadOnly();
    private static readonly string[] _playerInitiativeEndRequestFieldNames = new string[] {  };
    private static readonly uint[] _playerInitiativeEndRequestFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerInitiativeEndRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerInitiativeEndRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerInitiativeEndRequestFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerInitiativeEndRequest other = obj as PlayerInitiativeEndRequest;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerInitiativeEndRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerInitiativeEndRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerInitiativeEndRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerInitiativeEndRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerInitiativeEndRequest result;
      
      private PlayerInitiativeEndRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerInitiativeEndRequest original = result;
          result = new PlayerInitiativeEndRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerInitiativeEndRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerInitiativeEndRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerInitiativeEndRequest.DefaultInstance; }
      }
      
      public override PlayerInitiativeEndRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerInitiativeEndRequest) {
          return MergeFrom((PlayerInitiativeEndRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerInitiativeEndRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerInitiativeEndRequest.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerInitiativeEndRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerInitiativeEndRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerInitiativeEndRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerInitiativeEndResponse : pb::GeneratedMessageLite<PlayerInitiativeEndResponse, PlayerInitiativeEndResponse.Builder> {
    private PlayerInitiativeEndResponse() { }
    private static readonly PlayerInitiativeEndResponse defaultInstance = new PlayerInitiativeEndResponse().MakeReadOnly();
    private static readonly string[] _playerInitiativeEndResponseFieldNames = new string[] {  };
    private static readonly uint[] _playerInitiativeEndResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerInitiativeEndResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerInitiativeEndResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerInitiativeEndResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerInitiativeEndResponse other = obj as PlayerInitiativeEndResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerInitiativeEndResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerInitiativeEndResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerInitiativeEndResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerInitiativeEndResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerInitiativeEndResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerInitiativeEndResponse result;
      
      private PlayerInitiativeEndResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerInitiativeEndResponse original = result;
          result = new PlayerInitiativeEndResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerInitiativeEndResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerInitiativeEndResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerInitiativeEndResponse.DefaultInstance; }
      }
      
      public override PlayerInitiativeEndResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerInitiativeEndResponse) {
          return MergeFrom((PlayerInitiativeEndResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerInitiativeEndResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerInitiativeEndResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerInitiativeEndResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerInitiativeEndResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerInitiativeEndResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerMutuallyRequest : pb::GeneratedMessageLite<PlayerMutuallyRequest, PlayerMutuallyRequest.Builder> {
    private PlayerMutuallyRequest() { }
    private static readonly PlayerMutuallyRequest defaultInstance = new PlayerMutuallyRequest().MakeReadOnly();
    private static readonly string[] _playerMutuallyRequestFieldNames = new string[] { "type" };
    private static readonly uint[] _playerMutuallyRequestFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerMutuallyRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMutuallyRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMutuallyRequestFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerMutuallyRequest other = obj as PlayerMutuallyRequest;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMutuallyRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerMutuallyRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerMutuallyRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMutuallyRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMutuallyRequest result;
      
      private PlayerMutuallyRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMutuallyRequest original = result;
          result = new PlayerMutuallyRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMutuallyRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerMutuallyRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerMutuallyRequest.DefaultInstance; }
      }
      
      public override PlayerMutuallyRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerMutuallyRequest) {
          return MergeFrom((PlayerMutuallyRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMutuallyRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerMutuallyRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMutuallyRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMutuallyRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static PlayerMutuallyRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerMutuallyResponse : pb::GeneratedMessageLite<PlayerMutuallyResponse, PlayerMutuallyResponse.Builder> {
    private PlayerMutuallyResponse() { }
    private static readonly PlayerMutuallyResponse defaultInstance = new PlayerMutuallyResponse().MakeReadOnly();
    private static readonly string[] _playerMutuallyResponseFieldNames = new string[] {  };
    private static readonly uint[] _playerMutuallyResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerMutuallyResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMutuallyResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMutuallyResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerMutuallyResponse other = obj as PlayerMutuallyResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMutuallyResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerMutuallyResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerMutuallyResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMutuallyResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMutuallyResponse result;
      
      private PlayerMutuallyResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMutuallyResponse original = result;
          result = new PlayerMutuallyResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMutuallyResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerMutuallyResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerMutuallyResponse.DefaultInstance; }
      }
      
      public override PlayerMutuallyResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerMutuallyResponse) {
          return MergeFrom((PlayerMutuallyResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMutuallyResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerMutuallyResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMutuallyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMutuallyResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerMutuallyResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerMutuallyFeedbackRequest : pb::GeneratedMessageLite<PlayerMutuallyFeedbackRequest, PlayerMutuallyFeedbackRequest.Builder> {
    private PlayerMutuallyFeedbackRequest() { }
    private static readonly PlayerMutuallyFeedbackRequest defaultInstance = new PlayerMutuallyFeedbackRequest().MakeReadOnly();
    private static readonly string[] _playerMutuallyFeedbackRequestFieldNames = new string[] { "isAgree" };
    private static readonly uint[] _playerMutuallyFeedbackRequestFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerMutuallyFeedbackRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMutuallyFeedbackRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsAgreeFieldNumber = 1;
    private bool hasIsAgree;
    private bool isAgree_;
    public bool HasIsAgree {
      get { return hasIsAgree; }
    }
    public bool IsAgree {
      get { return isAgree_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMutuallyFeedbackRequestFieldNames;
      if (hasIsAgree) {
        output.WriteBool(1, field_names[0], IsAgree);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsAgree) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsAgree);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasIsAgree) hash ^= isAgree_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerMutuallyFeedbackRequest other = obj as PlayerMutuallyFeedbackRequest;
      if (other == null) return false;
      if (hasIsAgree != other.hasIsAgree || (hasIsAgree && !isAgree_.Equals(other.isAgree_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMutuallyFeedbackRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerMutuallyFeedbackRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerMutuallyFeedbackRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMutuallyFeedbackRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMutuallyFeedbackRequest result;
      
      private PlayerMutuallyFeedbackRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMutuallyFeedbackRequest original = result;
          result = new PlayerMutuallyFeedbackRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMutuallyFeedbackRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerMutuallyFeedbackRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerMutuallyFeedbackRequest.DefaultInstance; }
      }
      
      public override PlayerMutuallyFeedbackRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerMutuallyFeedbackRequest) {
          return MergeFrom((PlayerMutuallyFeedbackRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMutuallyFeedbackRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerMutuallyFeedbackRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsAgree) {
          IsAgree = other.IsAgree;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMutuallyFeedbackRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMutuallyFeedbackRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsAgree = input.ReadBool(ref result.isAgree_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasIsAgree {
        get { return result.hasIsAgree; }
      }
      public bool IsAgree {
        get { return result.IsAgree; }
        set { SetIsAgree(value); }
      }
      public Builder SetIsAgree(bool value) {
        PrepareBuilder();
        result.hasIsAgree = true;
        result.isAgree_ = value;
        return this;
      }
      public Builder ClearIsAgree() {
        PrepareBuilder();
        result.hasIsAgree = false;
        result.isAgree_ = false;
        return this;
      }
    }
    static PlayerMutuallyFeedbackRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerMutuallyFeedbackResponse : pb::GeneratedMessageLite<PlayerMutuallyFeedbackResponse, PlayerMutuallyFeedbackResponse.Builder> {
    private PlayerMutuallyFeedbackResponse() { }
    private static readonly PlayerMutuallyFeedbackResponse defaultInstance = new PlayerMutuallyFeedbackResponse().MakeReadOnly();
    private static readonly string[] _playerMutuallyFeedbackResponseFieldNames = new string[] {  };
    private static readonly uint[] _playerMutuallyFeedbackResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerMutuallyFeedbackResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMutuallyFeedbackResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMutuallyFeedbackResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerMutuallyFeedbackResponse other = obj as PlayerMutuallyFeedbackResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMutuallyFeedbackResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMutuallyFeedbackResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerMutuallyFeedbackResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerMutuallyFeedbackResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMutuallyFeedbackResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMutuallyFeedbackResponse result;
      
      private PlayerMutuallyFeedbackResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMutuallyFeedbackResponse original = result;
          result = new PlayerMutuallyFeedbackResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMutuallyFeedbackResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerMutuallyFeedbackResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerMutuallyFeedbackResponse.DefaultInstance; }
      }
      
      public override PlayerMutuallyFeedbackResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerMutuallyFeedbackResponse) {
          return MergeFrom((PlayerMutuallyFeedbackResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMutuallyFeedbackResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerMutuallyFeedbackResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMutuallyFeedbackResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMutuallyFeedbackResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerMutuallyFeedbackResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerMatchRequest : pb::GeneratedMessageLite<PlayerMatchRequest, PlayerMatchRequest.Builder> {
    private PlayerMatchRequest() { }
    private static readonly PlayerMatchRequest defaultInstance = new PlayerMatchRequest().MakeReadOnly();
    private static readonly string[] _playerMatchRequestFieldNames = new string[] { "type" };
    private static readonly uint[] _playerMatchRequestFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerMatchRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMatchRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMatchRequestFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerMatchRequest other = obj as PlayerMatchRequest;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMatchRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerMatchRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerMatchRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMatchRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMatchRequest result;
      
      private PlayerMatchRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMatchRequest original = result;
          result = new PlayerMatchRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMatchRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerMatchRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerMatchRequest.DefaultInstance; }
      }
      
      public override PlayerMatchRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerMatchRequest) {
          return MergeFrom((PlayerMatchRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMatchRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerMatchRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMatchRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMatchRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static PlayerMatchRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerMatchResponse : pb::GeneratedMessageLite<PlayerMatchResponse, PlayerMatchResponse.Builder> {
    private PlayerMatchResponse() { }
    private static readonly PlayerMatchResponse defaultInstance = new PlayerMatchResponse().MakeReadOnly();
    private static readonly string[] _playerMatchResponseFieldNames = new string[] {  };
    private static readonly uint[] _playerMatchResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerMatchResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMatchResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMatchResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerMatchResponse other = obj as PlayerMatchResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMatchResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMatchResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerMatchResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerMatchResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMatchResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMatchResponse result;
      
      private PlayerMatchResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMatchResponse original = result;
          result = new PlayerMatchResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMatchResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerMatchResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerMatchResponse.DefaultInstance; }
      }
      
      public override PlayerMatchResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerMatchResponse) {
          return MergeFrom((PlayerMatchResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMatchResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerMatchResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMatchResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMatchResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerMatchResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerCancelMatchRequest : pb::GeneratedMessageLite<PlayerCancelMatchRequest, PlayerCancelMatchRequest.Builder> {
    private PlayerCancelMatchRequest() { }
    private static readonly PlayerCancelMatchRequest defaultInstance = new PlayerCancelMatchRequest().MakeReadOnly();
    private static readonly string[] _playerCancelMatchRequestFieldNames = new string[] { "type" };
    private static readonly uint[] _playerCancelMatchRequestFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerCancelMatchRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerCancelMatchRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerCancelMatchRequestFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerCancelMatchRequest other = obj as PlayerCancelMatchRequest;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerCancelMatchRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerCancelMatchRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerCancelMatchRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerCancelMatchRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerCancelMatchRequest result;
      
      private PlayerCancelMatchRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerCancelMatchRequest original = result;
          result = new PlayerCancelMatchRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerCancelMatchRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerCancelMatchRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerCancelMatchRequest.DefaultInstance; }
      }
      
      public override PlayerCancelMatchRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerCancelMatchRequest) {
          return MergeFrom((PlayerCancelMatchRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerCancelMatchRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerCancelMatchRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerCancelMatchRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerCancelMatchRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static PlayerCancelMatchRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerCancelMatchResponse : pb::GeneratedMessageLite<PlayerCancelMatchResponse, PlayerCancelMatchResponse.Builder> {
    private PlayerCancelMatchResponse() { }
    private static readonly PlayerCancelMatchResponse defaultInstance = new PlayerCancelMatchResponse().MakeReadOnly();
    private static readonly string[] _playerCancelMatchResponseFieldNames = new string[] {  };
    private static readonly uint[] _playerCancelMatchResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerCancelMatchResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerCancelMatchResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerCancelMatchResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerCancelMatchResponse other = obj as PlayerCancelMatchResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCancelMatchResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerCancelMatchResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerCancelMatchResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerCancelMatchResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerCancelMatchResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerCancelMatchResponse result;
      
      private PlayerCancelMatchResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerCancelMatchResponse original = result;
          result = new PlayerCancelMatchResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerCancelMatchResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerCancelMatchResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerCancelMatchResponse.DefaultInstance; }
      }
      
      public override PlayerCancelMatchResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerCancelMatchResponse) {
          return MergeFrom((PlayerCancelMatchResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerCancelMatchResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerCancelMatchResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerCancelMatchResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerCancelMatchResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerCancelMatchResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerBattleMesRequest : pb::GeneratedMessageLite<PlayerBattleMesRequest, PlayerBattleMesRequest.Builder> {
    private PlayerBattleMesRequest() { }
    private static readonly PlayerBattleMesRequest defaultInstance = new PlayerBattleMesRequest().MakeReadOnly();
    private static readonly string[] _playerBattleMesRequestFieldNames = new string[] { "battleMes" };
    private static readonly uint[] _playerBattleMesRequestFieldTags = new uint[] { 18 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerBattleMesRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerBattleMesRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleMesFieldNumber = 2;
    private bool hasBattleMes;
    private global::com.zyd.common.proto.client.BattleMes battleMes_;
    public bool HasBattleMes {
      get { return hasBattleMes; }
    }
    public global::com.zyd.common.proto.client.BattleMes BattleMes {
      get { return battleMes_ ?? global::com.zyd.common.proto.client.BattleMes.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerBattleMesRequestFieldNames;
      if (hasBattleMes) {
        output.WriteMessage(2, field_names[0], BattleMes);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBattleMes) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, BattleMes);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBattleMes) hash ^= battleMes_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerBattleMesRequest other = obj as PlayerBattleMesRequest;
      if (other == null) return false;
      if (hasBattleMes != other.hasBattleMes || (hasBattleMes && !battleMes_.Equals(other.battleMes_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerBattleMesRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerBattleMesRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerBattleMesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerBattleMesRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerBattleMesRequest result;
      
      private PlayerBattleMesRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerBattleMesRequest original = result;
          result = new PlayerBattleMesRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerBattleMesRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerBattleMesRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerBattleMesRequest.DefaultInstance; }
      }
      
      public override PlayerBattleMesRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerBattleMesRequest) {
          return MergeFrom((PlayerBattleMesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerBattleMesRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerBattleMesRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBattleMes) {
          MergeBattleMes(other.BattleMes);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerBattleMesRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerBattleMesRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              global::com.zyd.common.proto.client.BattleMes.Builder subBuilder = global::com.zyd.common.proto.client.BattleMes.CreateBuilder();
              if (result.hasBattleMes) {
                subBuilder.MergeFrom(BattleMes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BattleMes = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBattleMes {
       get { return result.hasBattleMes; }
      }
      public global::com.zyd.common.proto.client.BattleMes BattleMes {
        get { return result.BattleMes; }
        set { SetBattleMes(value); }
      }
      public Builder SetBattleMes(global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleMes = true;
        result.battleMes_ = value;
        return this;
      }
      public Builder SetBattleMes(global::com.zyd.common.proto.client.BattleMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBattleMes = true;
        result.battleMes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBattleMes(global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBattleMes &&
            result.battleMes_ != global::com.zyd.common.proto.client.BattleMes.DefaultInstance) {
            result.battleMes_ = global::com.zyd.common.proto.client.BattleMes.CreateBuilder(result.battleMes_).MergeFrom(value).BuildPartial();
        } else {
          result.battleMes_ = value;
        }
        result.hasBattleMes = true;
        return this;
      }
      public Builder ClearBattleMes() {
        PrepareBuilder();
        result.hasBattleMes = false;
        result.battleMes_ = null;
        return this;
      }
    }
    static PlayerBattleMesRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerBattleMesResponse : pb::GeneratedMessageLite<PlayerBattleMesResponse, PlayerBattleMesResponse.Builder> {
    private PlayerBattleMesResponse() { }
    private static readonly PlayerBattleMesResponse defaultInstance = new PlayerBattleMesResponse().MakeReadOnly();
    private static readonly string[] _playerBattleMesResponseFieldNames = new string[] { "error", "res" };
    private static readonly uint[] _playerBattleMesResponseFieldTags = new uint[] { 18, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerBattleMesResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerBattleMesResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ResFieldNumber = 1;
    private bool hasRes;
    private bool res_;
    public bool HasRes {
      get { return hasRes; }
    }
    public bool Res {
      get { return res_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ErrorFieldNumber = 2;
    private bool hasError;
    private string error_ = "";
    public bool HasError {
      get { return hasError; }
    }
    public string Error {
      get { return error_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasRes) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerBattleMesResponseFieldNames;
      if (hasRes) {
        output.WriteBool(1, field_names[1], Res);
      }
      if (hasError) {
        output.WriteString(2, field_names[0], Error);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRes) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Res);
        }
        if (hasError) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Error);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRes) hash ^= res_.GetHashCode();
      if (hasError) hash ^= error_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerBattleMesResponse other = obj as PlayerBattleMesResponse;
      if (other == null) return false;
      if (hasRes != other.hasRes || (hasRes && !res_.Equals(other.res_))) return false;
      if (hasError != other.hasError || (hasError && !error_.Equals(other.error_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerBattleMesResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerBattleMesResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerBattleMesResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerBattleMesResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerBattleMesResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerBattleMesResponse result;
      
      private PlayerBattleMesResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerBattleMesResponse original = result;
          result = new PlayerBattleMesResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerBattleMesResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerBattleMesResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerBattleMesResponse.DefaultInstance; }
      }
      
      public override PlayerBattleMesResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerBattleMesResponse) {
          return MergeFrom((PlayerBattleMesResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerBattleMesResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerBattleMesResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRes) {
          Res = other.Res;
        }
        if (other.HasError) {
          Error = other.Error;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerBattleMesResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerBattleMesResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRes = input.ReadBool(ref result.res_);
              break;
            }
            case 18: {
              result.hasError = input.ReadString(ref result.error_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRes {
        get { return result.hasRes; }
      }
      public bool Res {
        get { return result.Res; }
        set { SetRes(value); }
      }
      public Builder SetRes(bool value) {
        PrepareBuilder();
        result.hasRes = true;
        result.res_ = value;
        return this;
      }
      public Builder ClearRes() {
        PrepareBuilder();
        result.hasRes = false;
        result.res_ = false;
        return this;
      }
      
      public bool HasError {
        get { return result.hasError; }
      }
      public string Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = "";
        return this;
      }
    }
    static PlayerBattleMesResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class FairBattleLevelEndRequest : pb::GeneratedMessageLite<FairBattleLevelEndRequest, FairBattleLevelEndRequest.Builder> {
    private FairBattleLevelEndRequest() { }
    private static readonly FairBattleLevelEndRequest defaultInstance = new FairBattleLevelEndRequest().MakeReadOnly();
    private static readonly string[] _fairBattleLevelEndRequestFieldNames = new string[] { "isGiveUp" };
    private static readonly uint[] _fairBattleLevelEndRequestFieldTags = new uint[] { 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override FairBattleLevelEndRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FairBattleLevelEndRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsGiveUpFieldNumber = 2;
    private bool hasIsGiveUp;
    private bool isGiveUp_;
    public bool HasIsGiveUp {
      get { return hasIsGiveUp; }
    }
    public bool IsGiveUp {
      get { return isGiveUp_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fairBattleLevelEndRequestFieldNames;
      if (hasIsGiveUp) {
        output.WriteBool(2, field_names[0], IsGiveUp);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsGiveUp) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsGiveUp);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasIsGiveUp) hash ^= isGiveUp_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      FairBattleLevelEndRequest other = obj as FairBattleLevelEndRequest;
      if (other == null) return false;
      if (hasIsGiveUp != other.hasIsGiveUp || (hasIsGiveUp && !isGiveUp_.Equals(other.isGiveUp_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FairBattleLevelEndRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(FairBattleLevelEndRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<FairBattleLevelEndRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FairBattleLevelEndRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FairBattleLevelEndRequest result;
      
      private FairBattleLevelEndRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          FairBattleLevelEndRequest original = result;
          result = new FairBattleLevelEndRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FairBattleLevelEndRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override FairBattleLevelEndRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.FairBattleLevelEndRequest.DefaultInstance; }
      }
      
      public override FairBattleLevelEndRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is FairBattleLevelEndRequest) {
          return MergeFrom((FairBattleLevelEndRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FairBattleLevelEndRequest other) {
        if (other == global::com.zyd.common.proto.client.FairBattleLevelEndRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsGiveUp) {
          IsGiveUp = other.IsGiveUp;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fairBattleLevelEndRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fairBattleLevelEndRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              result.hasIsGiveUp = input.ReadBool(ref result.isGiveUp_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasIsGiveUp {
        get { return result.hasIsGiveUp; }
      }
      public bool IsGiveUp {
        get { return result.IsGiveUp; }
        set { SetIsGiveUp(value); }
      }
      public Builder SetIsGiveUp(bool value) {
        PrepareBuilder();
        result.hasIsGiveUp = true;
        result.isGiveUp_ = value;
        return this;
      }
      public Builder ClearIsGiveUp() {
        PrepareBuilder();
        result.hasIsGiveUp = false;
        result.isGiveUp_ = false;
        return this;
      }
    }
    static FairBattleLevelEndRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class FairBattleLevelEndResponse : pb::GeneratedMessageLite<FairBattleLevelEndResponse, FairBattleLevelEndResponse.Builder> {
    private FairBattleLevelEndResponse() { }
    private static readonly FairBattleLevelEndResponse defaultInstance = new FairBattleLevelEndResponse().MakeReadOnly();
    private static readonly string[] _fairBattleLevelEndResponseFieldNames = new string[] {  };
    private static readonly uint[] _fairBattleLevelEndResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override FairBattleLevelEndResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FairBattleLevelEndResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fairBattleLevelEndResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      FairBattleLevelEndResponse other = obj as FairBattleLevelEndResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FairBattleLevelEndResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FairBattleLevelEndResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(FairBattleLevelEndResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<FairBattleLevelEndResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FairBattleLevelEndResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FairBattleLevelEndResponse result;
      
      private FairBattleLevelEndResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          FairBattleLevelEndResponse original = result;
          result = new FairBattleLevelEndResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FairBattleLevelEndResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override FairBattleLevelEndResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.FairBattleLevelEndResponse.DefaultInstance; }
      }
      
      public override FairBattleLevelEndResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is FairBattleLevelEndResponse) {
          return MergeFrom((FairBattleLevelEndResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FairBattleLevelEndResponse other) {
        if (other == global::com.zyd.common.proto.client.FairBattleLevelEndResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fairBattleLevelEndResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fairBattleLevelEndResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static FairBattleLevelEndResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerReadyRequest : pb::GeneratedMessageLite<PlayerReadyRequest, PlayerReadyRequest.Builder> {
    private PlayerReadyRequest() { }
    private static readonly PlayerReadyRequest defaultInstance = new PlayerReadyRequest().MakeReadOnly();
    private static readonly string[] _playerReadyRequestFieldNames = new string[] { "type" };
    private static readonly uint[] _playerReadyRequestFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerReadyRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerReadyRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerReadyRequestFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerReadyRequest other = obj as PlayerReadyRequest;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerReadyRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerReadyRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerReadyRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerReadyRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerReadyRequest result;
      
      private PlayerReadyRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerReadyRequest original = result;
          result = new PlayerReadyRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerReadyRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerReadyRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerReadyRequest.DefaultInstance; }
      }
      
      public override PlayerReadyRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerReadyRequest) {
          return MergeFrom((PlayerReadyRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerReadyRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerReadyRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerReadyRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerReadyRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static PlayerReadyRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerReadyResponse : pb::GeneratedMessageLite<PlayerReadyResponse, PlayerReadyResponse.Builder> {
    private PlayerReadyResponse() { }
    private static readonly PlayerReadyResponse defaultInstance = new PlayerReadyResponse().MakeReadOnly();
    private static readonly string[] _playerReadyResponseFieldNames = new string[] {  };
    private static readonly uint[] _playerReadyResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerReadyResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerReadyResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerReadyResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerReadyResponse other = obj as PlayerReadyResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerReadyResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerReadyResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerReadyResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerReadyResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerReadyResponse result;
      
      private PlayerReadyResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerReadyResponse original = result;
          result = new PlayerReadyResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerReadyResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerReadyResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerReadyResponse.DefaultInstance; }
      }
      
      public override PlayerReadyResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerReadyResponse) {
          return MergeFrom((PlayerReadyResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerReadyResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerReadyResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerReadyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerReadyResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerReadyResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerPaintingEndRequest : pb::GeneratedMessageLite<PlayerPaintingEndRequest, PlayerPaintingEndRequest.Builder> {
    private PlayerPaintingEndRequest() { }
    private static readonly PlayerPaintingEndRequest defaultInstance = new PlayerPaintingEndRequest().MakeReadOnly();
    private static readonly string[] _playerPaintingEndRequestFieldNames = new string[] { "type" };
    private static readonly uint[] _playerPaintingEndRequestFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerPaintingEndRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerPaintingEndRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerPaintingEndRequestFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerPaintingEndRequest other = obj as PlayerPaintingEndRequest;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerPaintingEndRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerPaintingEndRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerPaintingEndRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerPaintingEndRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerPaintingEndRequest result;
      
      private PlayerPaintingEndRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerPaintingEndRequest original = result;
          result = new PlayerPaintingEndRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerPaintingEndRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerPaintingEndRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerPaintingEndRequest.DefaultInstance; }
      }
      
      public override PlayerPaintingEndRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerPaintingEndRequest) {
          return MergeFrom((PlayerPaintingEndRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerPaintingEndRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerPaintingEndRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerPaintingEndRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerPaintingEndRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static PlayerPaintingEndRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerPaintingEndResponse : pb::GeneratedMessageLite<PlayerPaintingEndResponse, PlayerPaintingEndResponse.Builder> {
    private PlayerPaintingEndResponse() { }
    private static readonly PlayerPaintingEndResponse defaultInstance = new PlayerPaintingEndResponse().MakeReadOnly();
    private static readonly string[] _playerPaintingEndResponseFieldNames = new string[] {  };
    private static readonly uint[] _playerPaintingEndResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerPaintingEndResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerPaintingEndResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerPaintingEndResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerPaintingEndResponse other = obj as PlayerPaintingEndResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerPaintingEndResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerPaintingEndResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerPaintingEndResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerPaintingEndResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerPaintingEndResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerPaintingEndResponse result;
      
      private PlayerPaintingEndResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerPaintingEndResponse original = result;
          result = new PlayerPaintingEndResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerPaintingEndResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerPaintingEndResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerPaintingEndResponse.DefaultInstance; }
      }
      
      public override PlayerPaintingEndResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerPaintingEndResponse) {
          return MergeFrom((PlayerPaintingEndResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerPaintingEndResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerPaintingEndResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerPaintingEndResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerPaintingEndResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerPaintingEndResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerRequireBattleMesAgainRequest : pb::GeneratedMessageLite<PlayerRequireBattleMesAgainRequest, PlayerRequireBattleMesAgainRequest.Builder> {
    private PlayerRequireBattleMesAgainRequest() { }
    private static readonly PlayerRequireBattleMesAgainRequest defaultInstance = new PlayerRequireBattleMesAgainRequest().MakeReadOnly();
    private static readonly string[] _playerRequireBattleMesAgainRequestFieldNames = new string[] { "roomId", "startPlayNum" };
    private static readonly uint[] _playerRequireBattleMesAgainRequestFieldTags = new uint[] { 16, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerRequireBattleMesAgainRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerRequireBattleMesAgainRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int StartPlayNumFieldNumber = 1;
    private bool hasStartPlayNum;
    private int startPlayNum_;
    public bool HasStartPlayNum {
      get { return hasStartPlayNum; }
    }
    public int StartPlayNum {
      get { return startPlayNum_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int RoomIdFieldNumber = 2;
    private bool hasRoomId;
    private long roomId_;
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    public long RoomId {
      get { return roomId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasStartPlayNum) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerRequireBattleMesAgainRequestFieldNames;
      if (hasStartPlayNum) {
        output.WriteInt32(1, field_names[1], StartPlayNum);
      }
      if (hasRoomId) {
        output.WriteInt64(2, field_names[0], RoomId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStartPlayNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, StartPlayNum);
        }
        if (hasRoomId) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, RoomId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasStartPlayNum) hash ^= startPlayNum_.GetHashCode();
      if (hasRoomId) hash ^= roomId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerRequireBattleMesAgainRequest other = obj as PlayerRequireBattleMesAgainRequest;
      if (other == null) return false;
      if (hasStartPlayNum != other.hasStartPlayNum || (hasStartPlayNum && !startPlayNum_.Equals(other.startPlayNum_))) return false;
      if (hasRoomId != other.hasRoomId || (hasRoomId && !roomId_.Equals(other.roomId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerRequireBattleMesAgainRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerRequireBattleMesAgainRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerRequireBattleMesAgainRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerRequireBattleMesAgainRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerRequireBattleMesAgainRequest result;
      
      private PlayerRequireBattleMesAgainRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerRequireBattleMesAgainRequest original = result;
          result = new PlayerRequireBattleMesAgainRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerRequireBattleMesAgainRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerRequireBattleMesAgainRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerRequireBattleMesAgainRequest.DefaultInstance; }
      }
      
      public override PlayerRequireBattleMesAgainRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerRequireBattleMesAgainRequest) {
          return MergeFrom((PlayerRequireBattleMesAgainRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerRequireBattleMesAgainRequest other) {
        if (other == global::com.zyd.common.proto.client.PlayerRequireBattleMesAgainRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartPlayNum) {
          StartPlayNum = other.StartPlayNum;
        }
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerRequireBattleMesAgainRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerRequireBattleMesAgainRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartPlayNum = input.ReadInt32(ref result.startPlayNum_);
              break;
            }
            case 16: {
              result.hasRoomId = input.ReadInt64(ref result.roomId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasStartPlayNum {
        get { return result.hasStartPlayNum; }
      }
      public int StartPlayNum {
        get { return result.StartPlayNum; }
        set { SetStartPlayNum(value); }
      }
      public Builder SetStartPlayNum(int value) {
        PrepareBuilder();
        result.hasStartPlayNum = true;
        result.startPlayNum_ = value;
        return this;
      }
      public Builder ClearStartPlayNum() {
        PrepareBuilder();
        result.hasStartPlayNum = false;
        result.startPlayNum_ = 0;
        return this;
      }
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      public long RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      public Builder SetRoomId(long value) {
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = 0L;
        return this;
      }
    }
    static PlayerRequireBattleMesAgainRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerRequireBattleMesAgainResponse : pb::GeneratedMessageLite<PlayerRequireBattleMesAgainResponse, PlayerRequireBattleMesAgainResponse.Builder> {
    private PlayerRequireBattleMesAgainResponse() { }
    private static readonly PlayerRequireBattleMesAgainResponse defaultInstance = new PlayerRequireBattleMesAgainResponse().MakeReadOnly();
    private static readonly string[] _playerRequireBattleMesAgainResponseFieldNames = new string[] { "battleMes", "playerSatrt" };
    private static readonly uint[] _playerRequireBattleMesAgainResponseFieldTags = new uint[] { 18, 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerRequireBattleMesAgainResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerRequireBattleMesAgainResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int PlayerSatrtFieldNumber = 1;
    private bool hasPlayerSatrt;
    private global::com.zyd.common.proto.client.PlayerStartPush playerSatrt_;
    public bool HasPlayerSatrt {
      get { return hasPlayerSatrt; }
    }
    public global::com.zyd.common.proto.client.PlayerStartPush PlayerSatrt {
      get { return playerSatrt_ ?? global::com.zyd.common.proto.client.PlayerStartPush.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleMesFieldNumber = 2;
    private pbc::PopsicleList<global::com.zyd.common.proto.client.BattleMes> battleMes_ = new pbc::PopsicleList<global::com.zyd.common.proto.client.BattleMes>();
    public scg::IList<global::com.zyd.common.proto.client.BattleMes> BattleMesList {
      get { return battleMes_; }
    }
    public int BattleMesCount {
      get { return battleMes_.Count; }
    }
    public global::com.zyd.common.proto.client.BattleMes GetBattleMes(int index) {
      return battleMes_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (HasPlayerSatrt) {
          if (!PlayerSatrt.IsInitialized) return false;
        }
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerRequireBattleMesAgainResponseFieldNames;
      if (hasPlayerSatrt) {
        output.WriteMessage(1, field_names[1], PlayerSatrt);
      }
      if (battleMes_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], battleMes_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerSatrt) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, PlayerSatrt);
        }
        foreach (global::com.zyd.common.proto.client.BattleMes element in BattleMesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasPlayerSatrt) hash ^= playerSatrt_.GetHashCode();
      foreach(global::com.zyd.common.proto.client.BattleMes i in battleMes_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerRequireBattleMesAgainResponse other = obj as PlayerRequireBattleMesAgainResponse;
      if (other == null) return false;
      if (hasPlayerSatrt != other.hasPlayerSatrt || (hasPlayerSatrt && !playerSatrt_.Equals(other.playerSatrt_))) return false;
      if(battleMes_.Count != other.battleMes_.Count) return false;
      for(int ix=0; ix < battleMes_.Count; ix++)
        if(!battleMes_[ix].Equals(other.battleMes_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerRequireBattleMesAgainResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerRequireBattleMesAgainResponse MakeReadOnly() {
      battleMes_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerRequireBattleMesAgainResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerRequireBattleMesAgainResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerRequireBattleMesAgainResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerRequireBattleMesAgainResponse result;
      
      private PlayerRequireBattleMesAgainResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerRequireBattleMesAgainResponse original = result;
          result = new PlayerRequireBattleMesAgainResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerRequireBattleMesAgainResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerRequireBattleMesAgainResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerRequireBattleMesAgainResponse.DefaultInstance; }
      }
      
      public override PlayerRequireBattleMesAgainResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerRequireBattleMesAgainResponse) {
          return MergeFrom((PlayerRequireBattleMesAgainResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerRequireBattleMesAgainResponse other) {
        if (other == global::com.zyd.common.proto.client.PlayerRequireBattleMesAgainResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerSatrt) {
          MergePlayerSatrt(other.PlayerSatrt);
        }
        if (other.battleMes_.Count != 0) {
          result.battleMes_.Add(other.battleMes_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerRequireBattleMesAgainResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerRequireBattleMesAgainResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.zyd.common.proto.client.PlayerStartPush.Builder subBuilder = global::com.zyd.common.proto.client.PlayerStartPush.CreateBuilder();
              if (result.hasPlayerSatrt) {
                subBuilder.MergeFrom(PlayerSatrt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlayerSatrt = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.battleMes_, global::com.zyd.common.proto.client.BattleMes.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasPlayerSatrt {
       get { return result.hasPlayerSatrt; }
      }
      public global::com.zyd.common.proto.client.PlayerStartPush PlayerSatrt {
        get { return result.PlayerSatrt; }
        set { SetPlayerSatrt(value); }
      }
      public Builder SetPlayerSatrt(global::com.zyd.common.proto.client.PlayerStartPush value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerSatrt = true;
        result.playerSatrt_ = value;
        return this;
      }
      public Builder SetPlayerSatrt(global::com.zyd.common.proto.client.PlayerStartPush.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayerSatrt = true;
        result.playerSatrt_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayerSatrt(global::com.zyd.common.proto.client.PlayerStartPush value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayerSatrt &&
            result.playerSatrt_ != global::com.zyd.common.proto.client.PlayerStartPush.DefaultInstance) {
            result.playerSatrt_ = global::com.zyd.common.proto.client.PlayerStartPush.CreateBuilder(result.playerSatrt_).MergeFrom(value).BuildPartial();
        } else {
          result.playerSatrt_ = value;
        }
        result.hasPlayerSatrt = true;
        return this;
      }
      public Builder ClearPlayerSatrt() {
        PrepareBuilder();
        result.hasPlayerSatrt = false;
        result.playerSatrt_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.zyd.common.proto.client.BattleMes> BattleMesList {
        get { return PrepareBuilder().battleMes_; }
      }
      public int BattleMesCount {
        get { return result.BattleMesCount; }
      }
      public global::com.zyd.common.proto.client.BattleMes GetBattleMes(int index) {
        return result.GetBattleMes(index);
      }
      public Builder SetBattleMes(int index, global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.battleMes_[index] = value;
        return this;
      }
      public Builder SetBattleMes(int index, global::com.zyd.common.proto.client.BattleMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.battleMes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBattleMes(global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.battleMes_.Add(value);
        return this;
      }
      public Builder AddBattleMes(global::com.zyd.common.proto.client.BattleMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.battleMes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBattleMes(scg::IEnumerable<global::com.zyd.common.proto.client.BattleMes> values) {
        PrepareBuilder();
        result.battleMes_.Add(values);
        return this;
      }
      public Builder ClearBattleMes() {
        PrepareBuilder();
        result.battleMes_.Clear();
        return this;
      }
    }
    static PlayerRequireBattleMesAgainResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class CheckPlayerFairBattleExistRequest : pb::GeneratedMessageLite<CheckPlayerFairBattleExistRequest, CheckPlayerFairBattleExistRequest.Builder> {
    private CheckPlayerFairBattleExistRequest() { }
    private static readonly CheckPlayerFairBattleExistRequest defaultInstance = new CheckPlayerFairBattleExistRequest().MakeReadOnly();
    private static readonly string[] _checkPlayerFairBattleExistRequestFieldNames = new string[] {  };
    private static readonly uint[] _checkPlayerFairBattleExistRequestFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override CheckPlayerFairBattleExistRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CheckPlayerFairBattleExistRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _checkPlayerFairBattleExistRequestFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CheckPlayerFairBattleExistRequest other = obj as CheckPlayerFairBattleExistRequest;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CheckPlayerFairBattleExistRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(CheckPlayerFairBattleExistRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<CheckPlayerFairBattleExistRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CheckPlayerFairBattleExistRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CheckPlayerFairBattleExistRequest result;
      
      private CheckPlayerFairBattleExistRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CheckPlayerFairBattleExistRequest original = result;
          result = new CheckPlayerFairBattleExistRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CheckPlayerFairBattleExistRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CheckPlayerFairBattleExistRequest DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.CheckPlayerFairBattleExistRequest.DefaultInstance; }
      }
      
      public override CheckPlayerFairBattleExistRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CheckPlayerFairBattleExistRequest) {
          return MergeFrom((CheckPlayerFairBattleExistRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CheckPlayerFairBattleExistRequest other) {
        if (other == global::com.zyd.common.proto.client.CheckPlayerFairBattleExistRequest.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_checkPlayerFairBattleExistRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _checkPlayerFairBattleExistRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static CheckPlayerFairBattleExistRequest() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class CheckPlayerFairBattleExistResponse : pb::GeneratedMessageLite<CheckPlayerFairBattleExistResponse, CheckPlayerFairBattleExistResponse.Builder> {
    private CheckPlayerFairBattleExistResponse() { }
    private static readonly CheckPlayerFairBattleExistResponse defaultInstance = new CheckPlayerFairBattleExistResponse().MakeReadOnly();
    private static readonly string[] _checkPlayerFairBattleExistResponseFieldNames = new string[] { "isExist", "roomId" };
    private static readonly uint[] _checkPlayerFairBattleExistResponseFieldTags = new uint[] { 8, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override CheckPlayerFairBattleExistResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CheckPlayerFairBattleExistResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsExistFieldNumber = 1;
    private bool hasIsExist;
    private bool isExist_;
    public bool HasIsExist {
      get { return hasIsExist; }
    }
    public bool IsExist {
      get { return isExist_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int RoomIdFieldNumber = 2;
    private bool hasRoomId;
    private long roomId_;
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    public long RoomId {
      get { return roomId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasIsExist) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _checkPlayerFairBattleExistResponseFieldNames;
      if (hasIsExist) {
        output.WriteBool(1, field_names[0], IsExist);
      }
      if (hasRoomId) {
        output.WriteInt64(2, field_names[1], RoomId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsExist) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsExist);
        }
        if (hasRoomId) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, RoomId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasIsExist) hash ^= isExist_.GetHashCode();
      if (hasRoomId) hash ^= roomId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CheckPlayerFairBattleExistResponse other = obj as CheckPlayerFairBattleExistResponse;
      if (other == null) return false;
      if (hasIsExist != other.hasIsExist || (hasIsExist && !isExist_.Equals(other.isExist_))) return false;
      if (hasRoomId != other.hasRoomId || (hasRoomId && !roomId_.Equals(other.roomId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CheckPlayerFairBattleExistResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CheckPlayerFairBattleExistResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(CheckPlayerFairBattleExistResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<CheckPlayerFairBattleExistResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CheckPlayerFairBattleExistResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CheckPlayerFairBattleExistResponse result;
      
      private CheckPlayerFairBattleExistResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CheckPlayerFairBattleExistResponse original = result;
          result = new CheckPlayerFairBattleExistResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CheckPlayerFairBattleExistResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CheckPlayerFairBattleExistResponse DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.CheckPlayerFairBattleExistResponse.DefaultInstance; }
      }
      
      public override CheckPlayerFairBattleExistResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CheckPlayerFairBattleExistResponse) {
          return MergeFrom((CheckPlayerFairBattleExistResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CheckPlayerFairBattleExistResponse other) {
        if (other == global::com.zyd.common.proto.client.CheckPlayerFairBattleExistResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsExist) {
          IsExist = other.IsExist;
        }
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_checkPlayerFairBattleExistResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _checkPlayerFairBattleExistResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsExist = input.ReadBool(ref result.isExist_);
              break;
            }
            case 16: {
              result.hasRoomId = input.ReadInt64(ref result.roomId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasIsExist {
        get { return result.hasIsExist; }
      }
      public bool IsExist {
        get { return result.IsExist; }
        set { SetIsExist(value); }
      }
      public Builder SetIsExist(bool value) {
        PrepareBuilder();
        result.hasIsExist = true;
        result.isExist_ = value;
        return this;
      }
      public Builder ClearIsExist() {
        PrepareBuilder();
        result.hasIsExist = false;
        result.isExist_ = false;
        return this;
      }
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      public long RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      public Builder SetRoomId(long value) {
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = 0L;
        return this;
      }
    }
    static CheckPlayerFairBattleExistResponse() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerCanPaintingPush : pb::GeneratedMessageLite<PlayerCanPaintingPush, PlayerCanPaintingPush.Builder> {
    private PlayerCanPaintingPush() { }
    private static readonly PlayerCanPaintingPush defaultInstance = new PlayerCanPaintingPush().MakeReadOnly();
    private static readonly string[] _playerCanPaintingPushFieldNames = new string[] {  };
    private static readonly uint[] _playerCanPaintingPushFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerCanPaintingPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerCanPaintingPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerCanPaintingPushFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerCanPaintingPush other = obj as PlayerCanPaintingPush;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanPaintingPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerCanPaintingPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerCanPaintingPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerCanPaintingPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerCanPaintingPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerCanPaintingPush result;
      
      private PlayerCanPaintingPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerCanPaintingPush original = result;
          result = new PlayerCanPaintingPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerCanPaintingPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerCanPaintingPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerCanPaintingPush.DefaultInstance; }
      }
      
      public override PlayerCanPaintingPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerCanPaintingPush) {
          return MergeFrom((PlayerCanPaintingPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerCanPaintingPush other) {
        if (other == global::com.zyd.common.proto.client.PlayerCanPaintingPush.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerCanPaintingPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerCanPaintingPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerCanPaintingPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerCanNextPush : pb::GeneratedMessageLite<PlayerCanNextPush, PlayerCanNextPush.Builder> {
    private PlayerCanNextPush() { }
    private static readonly PlayerCanNextPush defaultInstance = new PlayerCanNextPush().MakeReadOnly();
    private static readonly string[] _playerCanNextPushFieldNames = new string[] {  };
    private static readonly uint[] _playerCanNextPushFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerCanNextPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerCanNextPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerCanNextPushFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerCanNextPush other = obj as PlayerCanNextPush;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerCanNextPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerCanNextPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerCanNextPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerCanNextPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerCanNextPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerCanNextPush result;
      
      private PlayerCanNextPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerCanNextPush original = result;
          result = new PlayerCanNextPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerCanNextPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerCanNextPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerCanNextPush.DefaultInstance; }
      }
      
      public override PlayerCanNextPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerCanNextPush) {
          return MergeFrom((PlayerCanNextPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerCanNextPush other) {
        if (other == global::com.zyd.common.proto.client.PlayerCanNextPush.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerCanNextPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerCanNextPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerCanNextPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class NewServerBattleMesPush : pb::GeneratedMessageLite<NewServerBattleMesPush, NewServerBattleMesPush.Builder> {
    private NewServerBattleMesPush() { }
    private static readonly NewServerBattleMesPush defaultInstance = new NewServerBattleMesPush().MakeReadOnly();
    private static readonly string[] _newServerBattleMesPushFieldNames = new string[] { "activeInfo" };
    private static readonly uint[] _newServerBattleMesPushFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override NewServerBattleMesPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewServerBattleMesPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ActiveInfoFieldNumber = 1;
    private bool hasActiveInfo;
    private global::com.zyd.common.proto.client.ActiveInfo activeInfo_;
    public bool HasActiveInfo {
      get { return hasActiveInfo; }
    }
    public global::com.zyd.common.proto.client.ActiveInfo ActiveInfo {
      get { return activeInfo_ ?? global::com.zyd.common.proto.client.ActiveInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newServerBattleMesPushFieldNames;
      if (hasActiveInfo) {
        output.WriteMessage(1, field_names[0], ActiveInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasActiveInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ActiveInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasActiveInfo) hash ^= activeInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NewServerBattleMesPush other = obj as NewServerBattleMesPush;
      if (other == null) return false;
      if (hasActiveInfo != other.hasActiveInfo || (hasActiveInfo && !activeInfo_.Equals(other.activeInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NewServerBattleMesPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewServerBattleMesPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(NewServerBattleMesPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<NewServerBattleMesPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewServerBattleMesPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewServerBattleMesPush result;
      
      private NewServerBattleMesPush PrepareBuilder() {
        if (resultIsReadOnly) {
          NewServerBattleMesPush original = result;
          result = new NewServerBattleMesPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewServerBattleMesPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NewServerBattleMesPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.NewServerBattleMesPush.DefaultInstance; }
      }
      
      public override NewServerBattleMesPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NewServerBattleMesPush) {
          return MergeFrom((NewServerBattleMesPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewServerBattleMesPush other) {
        if (other == global::com.zyd.common.proto.client.NewServerBattleMesPush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasActiveInfo) {
          MergeActiveInfo(other.ActiveInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newServerBattleMesPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newServerBattleMesPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.zyd.common.proto.client.ActiveInfo.Builder subBuilder = global::com.zyd.common.proto.client.ActiveInfo.CreateBuilder();
              if (result.hasActiveInfo) {
                subBuilder.MergeFrom(ActiveInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActiveInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasActiveInfo {
       get { return result.hasActiveInfo; }
      }
      public global::com.zyd.common.proto.client.ActiveInfo ActiveInfo {
        get { return result.ActiveInfo; }
        set { SetActiveInfo(value); }
      }
      public Builder SetActiveInfo(global::com.zyd.common.proto.client.ActiveInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActiveInfo = true;
        result.activeInfo_ = value;
        return this;
      }
      public Builder SetActiveInfo(global::com.zyd.common.proto.client.ActiveInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActiveInfo = true;
        result.activeInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActiveInfo(global::com.zyd.common.proto.client.ActiveInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActiveInfo &&
            result.activeInfo_ != global::com.zyd.common.proto.client.ActiveInfo.DefaultInstance) {
            result.activeInfo_ = global::com.zyd.common.proto.client.ActiveInfo.CreateBuilder(result.activeInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.activeInfo_ = value;
        }
        result.hasActiveInfo = true;
        return this;
      }
      public Builder ClearActiveInfo() {
        PrepareBuilder();
        result.hasActiveInfo = false;
        result.activeInfo_ = null;
        return this;
      }
    }
    static NewServerBattleMesPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerUndoInfoPush : pb::GeneratedMessageLite<PlayerUndoInfoPush, PlayerUndoInfoPush.Builder> {
    private PlayerUndoInfoPush() { }
    private static readonly PlayerUndoInfoPush defaultInstance = new PlayerUndoInfoPush().MakeReadOnly();
    private static readonly string[] _playerUndoInfoPushFieldNames = new string[] { "undoInfo" };
    private static readonly uint[] _playerUndoInfoPushFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerUndoInfoPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerUndoInfoPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UndoInfoFieldNumber = 1;
    private pbc::PopsicleList<global::com.zyd.common.proto.client.UndoInfo> undoInfo_ = new pbc::PopsicleList<global::com.zyd.common.proto.client.UndoInfo>();
    public scg::IList<global::com.zyd.common.proto.client.UndoInfo> UndoInfoList {
      get { return undoInfo_; }
    }
    public int UndoInfoCount {
      get { return undoInfo_.Count; }
    }
    public global::com.zyd.common.proto.client.UndoInfo GetUndoInfo(int index) {
      return undoInfo_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerUndoInfoPushFieldNames;
      if (undoInfo_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], undoInfo_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.zyd.common.proto.client.UndoInfo element in UndoInfoList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.zyd.common.proto.client.UndoInfo i in undoInfo_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerUndoInfoPush other = obj as PlayerUndoInfoPush;
      if (other == null) return false;
      if(undoInfo_.Count != other.undoInfo_.Count) return false;
      for(int ix=0; ix < undoInfo_.Count; ix++)
        if(!undoInfo_[ix].Equals(other.undoInfo_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoInfoPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerUndoInfoPush MakeReadOnly() {
      undoInfo_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerUndoInfoPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerUndoInfoPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerUndoInfoPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerUndoInfoPush result;
      
      private PlayerUndoInfoPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerUndoInfoPush original = result;
          result = new PlayerUndoInfoPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerUndoInfoPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerUndoInfoPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerUndoInfoPush.DefaultInstance; }
      }
      
      public override PlayerUndoInfoPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerUndoInfoPush) {
          return MergeFrom((PlayerUndoInfoPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerUndoInfoPush other) {
        if (other == global::com.zyd.common.proto.client.PlayerUndoInfoPush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.undoInfo_.Count != 0) {
          result.undoInfo_.Add(other.undoInfo_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerUndoInfoPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerUndoInfoPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.undoInfo_, global::com.zyd.common.proto.client.UndoInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.zyd.common.proto.client.UndoInfo> UndoInfoList {
        get { return PrepareBuilder().undoInfo_; }
      }
      public int UndoInfoCount {
        get { return result.UndoInfoCount; }
      }
      public global::com.zyd.common.proto.client.UndoInfo GetUndoInfo(int index) {
        return result.GetUndoInfo(index);
      }
      public Builder SetUndoInfo(int index, global::com.zyd.common.proto.client.UndoInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.undoInfo_[index] = value;
        return this;
      }
      public Builder SetUndoInfo(int index, global::com.zyd.common.proto.client.UndoInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.undoInfo_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUndoInfo(global::com.zyd.common.proto.client.UndoInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.undoInfo_.Add(value);
        return this;
      }
      public Builder AddUndoInfo(global::com.zyd.common.proto.client.UndoInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.undoInfo_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUndoInfo(scg::IEnumerable<global::com.zyd.common.proto.client.UndoInfo> values) {
        PrepareBuilder();
        result.undoInfo_.Add(values);
        return this;
      }
      public Builder ClearUndoInfo() {
        PrepareBuilder();
        result.undoInfo_.Clear();
        return this;
      }
    }
    static PlayerUndoInfoPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerUndoPush : pb::GeneratedMessageLite<PlayerUndoPush, PlayerUndoPush.Builder> {
    private PlayerUndoPush() { }
    private static readonly PlayerUndoPush defaultInstance = new PlayerUndoPush().MakeReadOnly();
    private static readonly string[] _playerUndoPushFieldNames = new string[] { "type" };
    private static readonly uint[] _playerUndoPushFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerUndoPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerUndoPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerUndoPushFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerUndoPush other = obj as PlayerUndoPush;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerUndoPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerUndoPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerUndoPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerUndoPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerUndoPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerUndoPush result;
      
      private PlayerUndoPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerUndoPush original = result;
          result = new PlayerUndoPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerUndoPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerUndoPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerUndoPush.DefaultInstance; }
      }
      
      public override PlayerUndoPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerUndoPush) {
          return MergeFrom((PlayerUndoPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerUndoPush other) {
        if (other == global::com.zyd.common.proto.client.PlayerUndoPush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerUndoPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerUndoPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static PlayerUndoPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerAgreePush : pb::GeneratedMessageLite<PlayerAgreePush, PlayerAgreePush.Builder> {
    private PlayerAgreePush() { }
    private static readonly PlayerAgreePush defaultInstance = new PlayerAgreePush().MakeReadOnly();
    private static readonly string[] _playerAgreePushFieldNames = new string[] {  };
    private static readonly uint[] _playerAgreePushFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerAgreePush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerAgreePush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerAgreePushFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerAgreePush other = obj as PlayerAgreePush;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerAgreePush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerAgreePush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerAgreePush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerAgreePush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerAgreePush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerAgreePush result;
      
      private PlayerAgreePush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerAgreePush original = result;
          result = new PlayerAgreePush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerAgreePush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerAgreePush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerAgreePush.DefaultInstance; }
      }
      
      public override PlayerAgreePush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerAgreePush) {
          return MergeFrom((PlayerAgreePush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerAgreePush other) {
        if (other == global::com.zyd.common.proto.client.PlayerAgreePush.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerAgreePushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerAgreePushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerAgreePush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerNotAgreePush : pb::GeneratedMessageLite<PlayerNotAgreePush, PlayerNotAgreePush.Builder> {
    private PlayerNotAgreePush() { }
    private static readonly PlayerNotAgreePush defaultInstance = new PlayerNotAgreePush().MakeReadOnly();
    private static readonly string[] _playerNotAgreePushFieldNames = new string[] {  };
    private static readonly uint[] _playerNotAgreePushFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerNotAgreePush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerNotAgreePush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerNotAgreePushFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerNotAgreePush other = obj as PlayerNotAgreePush;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotAgreePush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerNotAgreePush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerNotAgreePush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerNotAgreePush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerNotAgreePush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerNotAgreePush result;
      
      private PlayerNotAgreePush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerNotAgreePush original = result;
          result = new PlayerNotAgreePush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerNotAgreePush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerNotAgreePush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerNotAgreePush.DefaultInstance; }
      }
      
      public override PlayerNotAgreePush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerNotAgreePush) {
          return MergeFrom((PlayerNotAgreePush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerNotAgreePush other) {
        if (other == global::com.zyd.common.proto.client.PlayerNotAgreePush.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerNotAgreePushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerNotAgreePushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerNotAgreePush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class UndoInfo : pb::GeneratedMessageLite<UndoInfo, UndoInfo.Builder> {
    private UndoInfo() { }
    private static readonly UndoInfo defaultInstance = new UndoInfo().MakeReadOnly();
    private static readonly string[] _undoInfoFieldNames = new string[] { "battleMes", "isEat", "type", "userId" };
    private static readonly uint[] _undoInfoFieldTags = new uint[] { 10, 16, 24, 32 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override UndoInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UndoInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleMesFieldNumber = 1;
    private bool hasBattleMes;
    private global::com.zyd.common.proto.client.BattleMes battleMes_;
    public bool HasBattleMes {
      get { return hasBattleMes; }
    }
    public global::com.zyd.common.proto.client.BattleMes BattleMes {
      get { return battleMes_ ?? global::com.zyd.common.proto.client.BattleMes.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsEatFieldNumber = 2;
    private bool hasIsEat;
    private bool isEat_;
    public bool HasIsEat {
      get { return hasIsEat; }
    }
    public bool IsEat {
      get { return isEat_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 4;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _undoInfoFieldNames;
      if (hasBattleMes) {
        output.WriteMessage(1, field_names[0], BattleMes);
      }
      if (hasIsEat) {
        output.WriteBool(2, field_names[1], IsEat);
      }
      if (hasType) {
        output.WriteInt32(3, field_names[2], Type);
      }
      if (hasUserId) {
        output.WriteInt32(4, field_names[3], UserId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBattleMes) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BattleMes);
        }
        if (hasIsEat) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsEat);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, UserId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBattleMes) hash ^= battleMes_.GetHashCode();
      if (hasIsEat) hash ^= isEat_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      UndoInfo other = obj as UndoInfo;
      if (other == null) return false;
      if (hasBattleMes != other.hasBattleMes || (hasBattleMes && !battleMes_.Equals(other.battleMes_))) return false;
      if (hasIsEat != other.hasIsEat || (hasIsEat && !isEat_.Equals(other.isEat_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UndoInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UndoInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(UndoInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<UndoInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UndoInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UndoInfo result;
      
      private UndoInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          UndoInfo original = result;
          result = new UndoInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UndoInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override UndoInfo DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.UndoInfo.DefaultInstance; }
      }
      
      public override UndoInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is UndoInfo) {
          return MergeFrom((UndoInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UndoInfo other) {
        if (other == global::com.zyd.common.proto.client.UndoInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBattleMes) {
          MergeBattleMes(other.BattleMes);
        }
        if (other.HasIsEat) {
          IsEat = other.IsEat;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_undoInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _undoInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.zyd.common.proto.client.BattleMes.Builder subBuilder = global::com.zyd.common.proto.client.BattleMes.CreateBuilder();
              if (result.hasBattleMes) {
                subBuilder.MergeFrom(BattleMes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BattleMes = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasIsEat = input.ReadBool(ref result.isEat_);
              break;
            }
            case 24: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 32: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBattleMes {
       get { return result.hasBattleMes; }
      }
      public global::com.zyd.common.proto.client.BattleMes BattleMes {
        get { return result.BattleMes; }
        set { SetBattleMes(value); }
      }
      public Builder SetBattleMes(global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleMes = true;
        result.battleMes_ = value;
        return this;
      }
      public Builder SetBattleMes(global::com.zyd.common.proto.client.BattleMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBattleMes = true;
        result.battleMes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBattleMes(global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBattleMes &&
            result.battleMes_ != global::com.zyd.common.proto.client.BattleMes.DefaultInstance) {
            result.battleMes_ = global::com.zyd.common.proto.client.BattleMes.CreateBuilder(result.battleMes_).MergeFrom(value).BuildPartial();
        } else {
          result.battleMes_ = value;
        }
        result.hasBattleMes = true;
        return this;
      }
      public Builder ClearBattleMes() {
        PrepareBuilder();
        result.hasBattleMes = false;
        result.battleMes_ = null;
        return this;
      }
      
      public bool HasIsEat {
        get { return result.hasIsEat; }
      }
      public bool IsEat {
        get { return result.IsEat; }
        set { SetIsEat(value); }
      }
      public Builder SetIsEat(bool value) {
        PrepareBuilder();
        result.hasIsEat = true;
        result.isEat_ = value;
        return this;
      }
      public Builder ClearIsEat() {
        PrepareBuilder();
        result.hasIsEat = false;
        result.isEat_ = false;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
    }
    static UndoInfo() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayUndoNextPush : pb::GeneratedMessageLite<PlayUndoNextPush, PlayUndoNextPush.Builder> {
    private PlayUndoNextPush() { }
    private static readonly PlayUndoNextPush defaultInstance = new PlayUndoNextPush().MakeReadOnly();
    private static readonly string[] _playUndoNextPushFieldNames = new string[] {  };
    private static readonly uint[] _playUndoNextPushFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayUndoNextPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayUndoNextPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playUndoNextPushFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayUndoNextPush other = obj as PlayUndoNextPush;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayUndoNextPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayUndoNextPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayUndoNextPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayUndoNextPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayUndoNextPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayUndoNextPush result;
      
      private PlayUndoNextPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayUndoNextPush original = result;
          result = new PlayUndoNextPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayUndoNextPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayUndoNextPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayUndoNextPush.DefaultInstance; }
      }
      
      public override PlayUndoNextPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayUndoNextPush) {
          return MergeFrom((PlayUndoNextPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayUndoNextPush other) {
        if (other == global::com.zyd.common.proto.client.PlayUndoNextPush.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playUndoNextPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playUndoNextPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayUndoNextPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayNextPush : pb::GeneratedMessageLite<PlayNextPush, PlayNextPush.Builder> {
    private PlayNextPush() { }
    private static readonly PlayNextPush defaultInstance = new PlayNextPush().MakeReadOnly();
    private static readonly string[] _playNextPushFieldNames = new string[] {  };
    private static readonly uint[] _playNextPushFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayNextPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayNextPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playNextPushFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayNextPush other = obj as PlayNextPush;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayNextPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayNextPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayNextPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayNextPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayNextPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayNextPush result;
      
      private PlayNextPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayNextPush original = result;
          result = new PlayNextPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayNextPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayNextPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayNextPush.DefaultInstance; }
      }
      
      public override PlayNextPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayNextPush) {
          return MergeFrom((PlayNextPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayNextPush other) {
        if (other == global::com.zyd.common.proto.client.PlayNextPush.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playNextPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playNextPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayNextPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class ServerBattleMesPush : pb::GeneratedMessageLite<ServerBattleMesPush, ServerBattleMesPush.Builder> {
    private ServerBattleMesPush() { }
    private static readonly ServerBattleMesPush defaultInstance = new ServerBattleMesPush().MakeReadOnly();
    private static readonly string[] _serverBattleMesPushFieldNames = new string[] { "battleMes", "currentTime", "nextTime" };
    private static readonly uint[] _serverBattleMesPushFieldTags = new uint[] { 26, 8, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ServerBattleMesPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerBattleMesPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int CurrentTimeFieldNumber = 1;
    private bool hasCurrentTime;
    private long currentTime_;
    public bool HasCurrentTime {
      get { return hasCurrentTime; }
    }
    public long CurrentTime {
      get { return currentTime_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int NextTimeFieldNumber = 2;
    private bool hasNextTime;
    private long nextTime_;
    public bool HasNextTime {
      get { return hasNextTime; }
    }
    public long NextTime {
      get { return nextTime_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleMesFieldNumber = 3;
    private bool hasBattleMes;
    private global::com.zyd.common.proto.client.BattleMes battleMes_;
    public bool HasBattleMes {
      get { return hasBattleMes; }
    }
    public global::com.zyd.common.proto.client.BattleMes BattleMes {
      get { return battleMes_ ?? global::com.zyd.common.proto.client.BattleMes.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasCurrentTime) return false;
        if (!hasNextTime) return false;
        if (!hasBattleMes) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverBattleMesPushFieldNames;
      if (hasCurrentTime) {
        output.WriteInt64(1, field_names[1], CurrentTime);
      }
      if (hasNextTime) {
        output.WriteInt64(2, field_names[2], NextTime);
      }
      if (hasBattleMes) {
        output.WriteMessage(3, field_names[0], BattleMes);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCurrentTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, CurrentTime);
        }
        if (hasNextTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, NextTime);
        }
        if (hasBattleMes) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, BattleMes);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasCurrentTime) hash ^= currentTime_.GetHashCode();
      if (hasNextTime) hash ^= nextTime_.GetHashCode();
      if (hasBattleMes) hash ^= battleMes_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ServerBattleMesPush other = obj as ServerBattleMesPush;
      if (other == null) return false;
      if (hasCurrentTime != other.hasCurrentTime || (hasCurrentTime && !currentTime_.Equals(other.currentTime_))) return false;
      if (hasNextTime != other.hasNextTime || (hasNextTime && !nextTime_.Equals(other.nextTime_))) return false;
      if (hasBattleMes != other.hasBattleMes || (hasBattleMes && !battleMes_.Equals(other.battleMes_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ServerBattleMesPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerBattleMesPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ServerBattleMesPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ServerBattleMesPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerBattleMesPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerBattleMesPush result;
      
      private ServerBattleMesPush PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerBattleMesPush original = result;
          result = new ServerBattleMesPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerBattleMesPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ServerBattleMesPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.ServerBattleMesPush.DefaultInstance; }
      }
      
      public override ServerBattleMesPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ServerBattleMesPush) {
          return MergeFrom((ServerBattleMesPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerBattleMesPush other) {
        if (other == global::com.zyd.common.proto.client.ServerBattleMesPush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentTime) {
          CurrentTime = other.CurrentTime;
        }
        if (other.HasNextTime) {
          NextTime = other.NextTime;
        }
        if (other.HasBattleMes) {
          MergeBattleMes(other.BattleMes);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverBattleMesPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverBattleMesPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentTime = input.ReadInt64(ref result.currentTime_);
              break;
            }
            case 16: {
              result.hasNextTime = input.ReadInt64(ref result.nextTime_);
              break;
            }
            case 26: {
              global::com.zyd.common.proto.client.BattleMes.Builder subBuilder = global::com.zyd.common.proto.client.BattleMes.CreateBuilder();
              if (result.hasBattleMes) {
                subBuilder.MergeFrom(BattleMes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BattleMes = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasCurrentTime {
        get { return result.hasCurrentTime; }
      }
      public long CurrentTime {
        get { return result.CurrentTime; }
        set { SetCurrentTime(value); }
      }
      public Builder SetCurrentTime(long value) {
        PrepareBuilder();
        result.hasCurrentTime = true;
        result.currentTime_ = value;
        return this;
      }
      public Builder ClearCurrentTime() {
        PrepareBuilder();
        result.hasCurrentTime = false;
        result.currentTime_ = 0L;
        return this;
      }
      
      public bool HasNextTime {
        get { return result.hasNextTime; }
      }
      public long NextTime {
        get { return result.NextTime; }
        set { SetNextTime(value); }
      }
      public Builder SetNextTime(long value) {
        PrepareBuilder();
        result.hasNextTime = true;
        result.nextTime_ = value;
        return this;
      }
      public Builder ClearNextTime() {
        PrepareBuilder();
        result.hasNextTime = false;
        result.nextTime_ = 0L;
        return this;
      }
      
      public bool HasBattleMes {
       get { return result.hasBattleMes; }
      }
      public global::com.zyd.common.proto.client.BattleMes BattleMes {
        get { return result.BattleMes; }
        set { SetBattleMes(value); }
      }
      public Builder SetBattleMes(global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleMes = true;
        result.battleMes_ = value;
        return this;
      }
      public Builder SetBattleMes(global::com.zyd.common.proto.client.BattleMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBattleMes = true;
        result.battleMes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBattleMes(global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBattleMes &&
            result.battleMes_ != global::com.zyd.common.proto.client.BattleMes.DefaultInstance) {
            result.battleMes_ = global::com.zyd.common.proto.client.BattleMes.CreateBuilder(result.battleMes_).MergeFrom(value).BuildPartial();
        } else {
          result.battleMes_ = value;
        }
        result.hasBattleMes = true;
        return this;
      }
      public Builder ClearBattleMes() {
        PrepareBuilder();
        result.hasBattleMes = false;
        result.battleMes_ = null;
        return this;
      }
    }
    static ServerBattleMesPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerStartPush : pb::GeneratedMessageLite<PlayerStartPush, PlayerStartPush.Builder> {
    private PlayerStartPush() { }
    private static readonly PlayerStartPush defaultInstance = new PlayerStartPush().MakeReadOnly();
    private static readonly string[] _playerStartPushFieldNames = new string[] { "playerMes", "roomId", "userId" };
    private static readonly uint[] _playerStartPushFieldTags = new uint[] { 10, 32, 24 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerStartPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerStartPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int PlayerMesFieldNumber = 1;
    private pbc::PopsicleList<global::com.zyd.common.proto.client.PlayerMes> playerMes_ = new pbc::PopsicleList<global::com.zyd.common.proto.client.PlayerMes>();
    public scg::IList<global::com.zyd.common.proto.client.PlayerMes> PlayerMesList {
      get { return playerMes_; }
    }
    public int PlayerMesCount {
      get { return playerMes_.Count; }
    }
    public global::com.zyd.common.proto.client.PlayerMes GetPlayerMes(int index) {
      return playerMes_[index];
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 3;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int RoomIdFieldNumber = 4;
    private bool hasRoomId;
    private long roomId_;
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    public long RoomId {
      get { return roomId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        foreach (global::com.zyd.common.proto.client.PlayerMes element in PlayerMesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerStartPushFieldNames;
      if (playerMes_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], playerMes_);
      }
      if (hasUserId) {
        output.WriteInt32(3, field_names[2], UserId);
      }
      if (hasRoomId) {
        output.WriteInt64(4, field_names[1], RoomId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.zyd.common.proto.client.PlayerMes element in PlayerMesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, UserId);
        }
        if (hasRoomId) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, RoomId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.zyd.common.proto.client.PlayerMes i in playerMes_)
        hash ^= i.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasRoomId) hash ^= roomId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerStartPush other = obj as PlayerStartPush;
      if (other == null) return false;
      if(playerMes_.Count != other.playerMes_.Count) return false;
      for(int ix=0; ix < playerMes_.Count; ix++)
        if(!playerMes_[ix].Equals(other.playerMes_[ix])) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasRoomId != other.hasRoomId || (hasRoomId && !roomId_.Equals(other.roomId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerStartPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerStartPush MakeReadOnly() {
      playerMes_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerStartPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerStartPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerStartPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerStartPush result;
      
      private PlayerStartPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerStartPush original = result;
          result = new PlayerStartPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerStartPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerStartPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerStartPush.DefaultInstance; }
      }
      
      public override PlayerStartPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerStartPush) {
          return MergeFrom((PlayerStartPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerStartPush other) {
        if (other == global::com.zyd.common.proto.client.PlayerStartPush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.playerMes_.Count != 0) {
          result.playerMes_.Add(other.playerMes_);
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerStartPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerStartPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.playerMes_, global::com.zyd.common.proto.client.PlayerMes.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 32: {
              result.hasRoomId = input.ReadInt64(ref result.roomId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.zyd.common.proto.client.PlayerMes> PlayerMesList {
        get { return PrepareBuilder().playerMes_; }
      }
      public int PlayerMesCount {
        get { return result.PlayerMesCount; }
      }
      public global::com.zyd.common.proto.client.PlayerMes GetPlayerMes(int index) {
        return result.GetPlayerMes(index);
      }
      public Builder SetPlayerMes(int index, global::com.zyd.common.proto.client.PlayerMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.playerMes_[index] = value;
        return this;
      }
      public Builder SetPlayerMes(int index, global::com.zyd.common.proto.client.PlayerMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.playerMes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPlayerMes(global::com.zyd.common.proto.client.PlayerMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.playerMes_.Add(value);
        return this;
      }
      public Builder AddPlayerMes(global::com.zyd.common.proto.client.PlayerMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.playerMes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePlayerMes(scg::IEnumerable<global::com.zyd.common.proto.client.PlayerMes> values) {
        PrepareBuilder();
        result.playerMes_.Add(values);
        return this;
      }
      public Builder ClearPlayerMes() {
        PrepareBuilder();
        result.playerMes_.Clear();
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      public long RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      public Builder SetRoomId(long value) {
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = 0L;
        return this;
      }
    }
    static PlayerStartPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerReadyFinishedPush : pb::GeneratedMessageLite<PlayerReadyFinishedPush, PlayerReadyFinishedPush.Builder> {
    private PlayerReadyFinishedPush() { }
    private static readonly PlayerReadyFinishedPush defaultInstance = new PlayerReadyFinishedPush().MakeReadOnly();
    private static readonly string[] _playerReadyFinishedPushFieldNames = new string[] {  };
    private static readonly uint[] _playerReadyFinishedPushFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerReadyFinishedPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerReadyFinishedPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerReadyFinishedPushFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerReadyFinishedPush other = obj as PlayerReadyFinishedPush;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerReadyFinishedPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerReadyFinishedPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerReadyFinishedPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerReadyFinishedPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerReadyFinishedPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerReadyFinishedPush result;
      
      private PlayerReadyFinishedPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerReadyFinishedPush original = result;
          result = new PlayerReadyFinishedPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerReadyFinishedPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerReadyFinishedPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerReadyFinishedPush.DefaultInstance; }
      }
      
      public override PlayerReadyFinishedPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerReadyFinishedPush) {
          return MergeFrom((PlayerReadyFinishedPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerReadyFinishedPush other) {
        if (other == global::com.zyd.common.proto.client.PlayerReadyFinishedPush.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerReadyFinishedPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerReadyFinishedPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static PlayerReadyFinishedPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerEndPush : pb::GeneratedMessageLite<PlayerEndPush, PlayerEndPush.Builder> {
    private PlayerEndPush() { }
    private static readonly PlayerEndPush defaultInstance = new PlayerEndPush().MakeReadOnly();
    private static readonly string[] _playerEndPushFieldNames = new string[] { "battleMes", "loseRank", "result", "winRank", "winUserId" };
    private static readonly uint[] _playerEndPushFieldTags = new uint[] { 18, 40, 24, 32, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerEndPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerEndPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int WinUserIdFieldNumber = 1;
    private bool hasWinUserId;
    private int winUserId_;
    public bool HasWinUserId {
      get { return hasWinUserId; }
    }
    public int WinUserId {
      get { return winUserId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleMesFieldNumber = 2;
    private pbc::PopsicleList<global::com.zyd.common.proto.client.BattleMes> battleMes_ = new pbc::PopsicleList<global::com.zyd.common.proto.client.BattleMes>();
    public scg::IList<global::com.zyd.common.proto.client.BattleMes> BattleMesList {
      get { return battleMes_; }
    }
    public int BattleMesCount {
      get { return battleMes_.Count; }
    }
    public global::com.zyd.common.proto.client.BattleMes GetBattleMes(int index) {
      return battleMes_[index];
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int WinRankFieldNumber = 4;
    private bool hasWinRank;
    private int winRank_;
    public bool HasWinRank {
      get { return hasWinRank; }
    }
    public int WinRank {
      get { return winRank_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int LoseRankFieldNumber = 5;
    private bool hasLoseRank;
    private int loseRank_;
    public bool HasLoseRank {
      get { return hasLoseRank; }
    }
    public int LoseRank {
      get { return loseRank_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerEndPushFieldNames;
      if (hasWinUserId) {
        output.WriteInt32(1, field_names[4], WinUserId);
      }
      if (battleMes_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], battleMes_);
      }
      if (hasResult) {
        output.WriteInt32(3, field_names[2], Result);
      }
      if (hasWinRank) {
        output.WriteInt32(4, field_names[3], WinRank);
      }
      if (hasLoseRank) {
        output.WriteInt32(5, field_names[1], LoseRank);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWinUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, WinUserId);
        }
        foreach (global::com.zyd.common.proto.client.BattleMes element in BattleMesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Result);
        }
        if (hasWinRank) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, WinRank);
        }
        if (hasLoseRank) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, LoseRank);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasWinUserId) hash ^= winUserId_.GetHashCode();
      foreach(global::com.zyd.common.proto.client.BattleMes i in battleMes_)
        hash ^= i.GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasWinRank) hash ^= winRank_.GetHashCode();
      if (hasLoseRank) hash ^= loseRank_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerEndPush other = obj as PlayerEndPush;
      if (other == null) return false;
      if (hasWinUserId != other.hasWinUserId || (hasWinUserId && !winUserId_.Equals(other.winUserId_))) return false;
      if(battleMes_.Count != other.battleMes_.Count) return false;
      for(int ix=0; ix < battleMes_.Count; ix++)
        if(!battleMes_[ix].Equals(other.battleMes_[ix])) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasWinRank != other.hasWinRank || (hasWinRank && !winRank_.Equals(other.winRank_))) return false;
      if (hasLoseRank != other.hasLoseRank || (hasLoseRank && !loseRank_.Equals(other.loseRank_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerEndPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerEndPush MakeReadOnly() {
      battleMes_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerEndPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerEndPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerEndPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerEndPush result;
      
      private PlayerEndPush PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerEndPush original = result;
          result = new PlayerEndPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerEndPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerEndPush DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerEndPush.DefaultInstance; }
      }
      
      public override PlayerEndPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerEndPush) {
          return MergeFrom((PlayerEndPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerEndPush other) {
        if (other == global::com.zyd.common.proto.client.PlayerEndPush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWinUserId) {
          WinUserId = other.WinUserId;
        }
        if (other.battleMes_.Count != 0) {
          result.battleMes_.Add(other.battleMes_);
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasWinRank) {
          WinRank = other.WinRank;
        }
        if (other.HasLoseRank) {
          LoseRank = other.LoseRank;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerEndPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerEndPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWinUserId = input.ReadInt32(ref result.winUserId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.battleMes_, global::com.zyd.common.proto.client.BattleMes.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 32: {
              result.hasWinRank = input.ReadInt32(ref result.winRank_);
              break;
            }
            case 40: {
              result.hasLoseRank = input.ReadInt32(ref result.loseRank_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasWinUserId {
        get { return result.hasWinUserId; }
      }
      public int WinUserId {
        get { return result.WinUserId; }
        set { SetWinUserId(value); }
      }
      public Builder SetWinUserId(int value) {
        PrepareBuilder();
        result.hasWinUserId = true;
        result.winUserId_ = value;
        return this;
      }
      public Builder ClearWinUserId() {
        PrepareBuilder();
        result.hasWinUserId = false;
        result.winUserId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.zyd.common.proto.client.BattleMes> BattleMesList {
        get { return PrepareBuilder().battleMes_; }
      }
      public int BattleMesCount {
        get { return result.BattleMesCount; }
      }
      public global::com.zyd.common.proto.client.BattleMes GetBattleMes(int index) {
        return result.GetBattleMes(index);
      }
      public Builder SetBattleMes(int index, global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.battleMes_[index] = value;
        return this;
      }
      public Builder SetBattleMes(int index, global::com.zyd.common.proto.client.BattleMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.battleMes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBattleMes(global::com.zyd.common.proto.client.BattleMes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.battleMes_.Add(value);
        return this;
      }
      public Builder AddBattleMes(global::com.zyd.common.proto.client.BattleMes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.battleMes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBattleMes(scg::IEnumerable<global::com.zyd.common.proto.client.BattleMes> values) {
        PrepareBuilder();
        result.battleMes_.Add(values);
        return this;
      }
      public Builder ClearBattleMes() {
        PrepareBuilder();
        result.battleMes_.Clear();
        return this;
      }
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasWinRank {
        get { return result.hasWinRank; }
      }
      public int WinRank {
        get { return result.WinRank; }
        set { SetWinRank(value); }
      }
      public Builder SetWinRank(int value) {
        PrepareBuilder();
        result.hasWinRank = true;
        result.winRank_ = value;
        return this;
      }
      public Builder ClearWinRank() {
        PrepareBuilder();
        result.hasWinRank = false;
        result.winRank_ = 0;
        return this;
      }
      
      public bool HasLoseRank {
        get { return result.hasLoseRank; }
      }
      public int LoseRank {
        get { return result.LoseRank; }
        set { SetLoseRank(value); }
      }
      public Builder SetLoseRank(int value) {
        PrepareBuilder();
        result.hasLoseRank = true;
        result.loseRank_ = value;
        return this;
      }
      public Builder ClearLoseRank() {
        PrepareBuilder();
        result.hasLoseRank = false;
        result.loseRank_ = 0;
        return this;
      }
    }
    static PlayerEndPush() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class BattleMes : pb::GeneratedMessageLite<BattleMes, BattleMes.Builder> {
    private BattleMes() { }
    private static readonly BattleMes defaultInstance = new BattleMes().MakeReadOnly();
    private static readonly string[] _battleMesFieldNames = new string[] { "PlayNum", "from", "promption", "to", "userId" };
    private static readonly uint[] _battleMesFieldTags = new uint[] { 8, 16, 40, 24, 32 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override BattleMes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BattleMes ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int PlayNumFieldNumber = 1;
    private bool hasPlayNum;
    private int playNum_;
    public bool HasPlayNum {
      get { return hasPlayNum; }
    }
    public int PlayNum {
      get { return playNum_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int FromFieldNumber = 2;
    private bool hasFrom;
    private int from_;
    public bool HasFrom {
      get { return hasFrom; }
    }
    public int From {
      get { return from_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ToFieldNumber = 3;
    private bool hasTo;
    private int to_;
    public bool HasTo {
      get { return hasTo; }
    }
    public int To {
      get { return to_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 4;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int PromptionFieldNumber = 5;
    private bool hasPromption;
    private int promption_;
    public bool HasPromption {
      get { return hasPromption; }
    }
    public int Promption {
      get { return promption_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _battleMesFieldNames;
      if (hasPlayNum) {
        output.WriteInt32(1, field_names[0], PlayNum);
      }
      if (hasFrom) {
        output.WriteInt32(2, field_names[1], From);
      }
      if (hasTo) {
        output.WriteInt32(3, field_names[3], To);
      }
      if (hasUserId) {
        output.WriteInt32(4, field_names[4], UserId);
      }
      if (hasPromption) {
        output.WriteInt32(5, field_names[2], Promption);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, PlayNum);
        }
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, From);
        }
        if (hasTo) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, To);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, UserId);
        }
        if (hasPromption) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Promption);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasPlayNum) hash ^= playNum_.GetHashCode();
      if (hasFrom) hash ^= from_.GetHashCode();
      if (hasTo) hash ^= to_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasPromption) hash ^= promption_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BattleMes other = obj as BattleMes;
      if (other == null) return false;
      if (hasPlayNum != other.hasPlayNum || (hasPlayNum && !playNum_.Equals(other.playNum_))) return false;
      if (hasFrom != other.hasFrom || (hasFrom && !from_.Equals(other.from_))) return false;
      if (hasTo != other.hasTo || (hasTo && !to_.Equals(other.to_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasPromption != other.hasPromption || (hasPromption && !promption_.Equals(other.promption_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleMes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BattleMes MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(BattleMes prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<BattleMes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BattleMes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BattleMes result;
      
      private BattleMes PrepareBuilder() {
        if (resultIsReadOnly) {
          BattleMes original = result;
          result = new BattleMes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BattleMes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BattleMes DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.BattleMes.DefaultInstance; }
      }
      
      public override BattleMes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BattleMes) {
          return MergeFrom((BattleMes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BattleMes other) {
        if (other == global::com.zyd.common.proto.client.BattleMes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayNum) {
          PlayNum = other.PlayNum;
        }
        if (other.HasFrom) {
          From = other.From;
        }
        if (other.HasTo) {
          To = other.To;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasPromption) {
          Promption = other.Promption;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_battleMesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _battleMesFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayNum = input.ReadInt32(ref result.playNum_);
              break;
            }
            case 16: {
              result.hasFrom = input.ReadInt32(ref result.from_);
              break;
            }
            case 24: {
              result.hasTo = input.ReadInt32(ref result.to_);
              break;
            }
            case 32: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 40: {
              result.hasPromption = input.ReadInt32(ref result.promption_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasPlayNum {
        get { return result.hasPlayNum; }
      }
      public int PlayNum {
        get { return result.PlayNum; }
        set { SetPlayNum(value); }
      }
      public Builder SetPlayNum(int value) {
        PrepareBuilder();
        result.hasPlayNum = true;
        result.playNum_ = value;
        return this;
      }
      public Builder ClearPlayNum() {
        PrepareBuilder();
        result.hasPlayNum = false;
        result.playNum_ = 0;
        return this;
      }
      
      public bool HasFrom {
        get { return result.hasFrom; }
      }
      public int From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(int value) {
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = 0;
        return this;
      }
      
      public bool HasTo {
        get { return result.hasTo; }
      }
      public int To {
        get { return result.To; }
        set { SetTo(value); }
      }
      public Builder SetTo(int value) {
        PrepareBuilder();
        result.hasTo = true;
        result.to_ = value;
        return this;
      }
      public Builder ClearTo() {
        PrepareBuilder();
        result.hasTo = false;
        result.to_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasPromption {
        get { return result.hasPromption; }
      }
      public int Promption {
        get { return result.Promption; }
        set { SetPromption(value); }
      }
      public Builder SetPromption(int value) {
        PrepareBuilder();
        result.hasPromption = true;
        result.promption_ = value;
        return this;
      }
      public Builder ClearPromption() {
        PrepareBuilder();
        result.hasPromption = false;
        result.promption_ = 0;
        return this;
      }
    }
    static BattleMes() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerMes : pb::GeneratedMessageLite<PlayerMes, PlayerMes.Builder> {
    private PlayerMes() { }
    private static readonly PlayerMes defaultInstance = new PlayerMes().MakeReadOnly();
    private static readonly string[] _playerMesFieldNames = new string[] { "count", "isWinning", "userId", "userName" };
    private static readonly uint[] _playerMesFieldTags = new uint[] { 32, 24, 8, 18 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerMes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMes ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsWinningFieldNumber = 3;
    private bool hasIsWinning;
    private bool isWinning_;
    public bool HasIsWinning {
      get { return hasIsWinning; }
    }
    public bool IsWinning {
      get { return isWinning_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int CountFieldNumber = 4;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMesFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[2], UserId);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[3], UserName);
      }
      if (hasIsWinning) {
        output.WriteBool(3, field_names[1], IsWinning);
      }
      if (hasCount) {
        output.WriteInt32(4, field_names[0], Count);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasIsWinning) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsWinning);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Count);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasUserName) hash ^= userName_.GetHashCode();
      if (hasIsWinning) hash ^= isWinning_.GetHashCode();
      if (hasCount) hash ^= count_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerMes other = obj as PlayerMes;
      if (other == null) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasUserName != other.hasUserName || (hasUserName && !userName_.Equals(other.userName_))) return false;
      if (hasIsWinning != other.hasIsWinning || (hasIsWinning && !isWinning_.Equals(other.isWinning_))) return false;
      if (hasCount != other.hasCount || (hasCount && !count_.Equals(other.count_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerMes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMes MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerMes prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerMes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMes result;
      
      private PlayerMes PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMes original = result;
          result = new PlayerMes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerMes DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerMes.DefaultInstance; }
      }
      
      public override PlayerMes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerMes) {
          return MergeFrom((PlayerMes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMes other) {
        if (other == global::com.zyd.common.proto.client.PlayerMes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasIsWinning) {
          IsWinning = other.IsWinning;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMesFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 24: {
              result.hasIsWinning = input.ReadBool(ref result.isWinning_);
              break;
            }
            case 32: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasIsWinning {
        get { return result.hasIsWinning; }
      }
      public bool IsWinning {
        get { return result.IsWinning; }
        set { SetIsWinning(value); }
      }
      public Builder SetIsWinning(bool value) {
        PrepareBuilder();
        result.hasIsWinning = true;
        result.isWinning_ = value;
        return this;
      }
      public Builder ClearIsWinning() {
        PrepareBuilder();
        result.hasIsWinning = false;
        result.isWinning_ = false;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
    }
    static PlayerMes() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class OnePlayerReady : pb::GeneratedMessageLite<OnePlayerReady, OnePlayerReady.Builder> {
    private OnePlayerReady() { }
    private static readonly OnePlayerReady defaultInstance = new OnePlayerReady().MakeReadOnly();
    private static readonly string[] _onePlayerReadyFieldNames = new string[] { "userId" };
    private static readonly uint[] _onePlayerReadyFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override OnePlayerReady DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OnePlayerReady ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _onePlayerReadyFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[0], UserId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      OnePlayerReady other = obj as OnePlayerReady;
      if (other == null) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static OnePlayerReady ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OnePlayerReady MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(OnePlayerReady prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<OnePlayerReady, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OnePlayerReady cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OnePlayerReady result;
      
      private OnePlayerReady PrepareBuilder() {
        if (resultIsReadOnly) {
          OnePlayerReady original = result;
          result = new OnePlayerReady();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OnePlayerReady MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override OnePlayerReady DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.OnePlayerReady.DefaultInstance; }
      }
      
      public override OnePlayerReady BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is OnePlayerReady) {
          return MergeFrom((OnePlayerReady) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OnePlayerReady other) {
        if (other == global::com.zyd.common.proto.client.OnePlayerReady.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_onePlayerReadyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _onePlayerReadyFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
    }
    static OnePlayerReady() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerNotReady : pb::GeneratedMessageLite<PlayerNotReady, PlayerNotReady.Builder> {
    private PlayerNotReady() { }
    private static readonly PlayerNotReady defaultInstance = new PlayerNotReady().MakeReadOnly();
    private static readonly string[] _playerNotReadyFieldNames = new string[] { "userId" };
    private static readonly uint[] _playerNotReadyFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlayerNotReady DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerNotReady ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 1;
    private pbc::PopsicleList<int> userId_ = new pbc::PopsicleList<int>();
    public scg::IList<int> UserIdList {
      get { return pbc::Lists.AsReadOnly(userId_); }
    }
    public int UserIdCount {
      get { return userId_.Count; }
    }
    public int GetUserId(int index) {
      return userId_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerNotReadyFieldNames;
      if (userId_.Count > 0) {
        output.WriteInt32Array(1, field_names[0], userId_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (int element in UserIdList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * userId_.Count;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(int i in userId_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlayerNotReady other = obj as PlayerNotReady;
      if (other == null) return false;
      if(userId_.Count != other.userId_.Count) return false;
      for(int ix=0; ix < userId_.Count; ix++)
        if(!userId_[ix].Equals(other.userId_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlayerNotReady ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerNotReady MakeReadOnly() {
      userId_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlayerNotReady prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlayerNotReady, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerNotReady cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerNotReady result;
      
      private PlayerNotReady PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerNotReady original = result;
          result = new PlayerNotReady();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerNotReady MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlayerNotReady DefaultInstanceForType {
        get { return global::com.zyd.common.proto.client.PlayerNotReady.DefaultInstance; }
      }
      
      public override PlayerNotReady BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlayerNotReady) {
          return MergeFrom((PlayerNotReady) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerNotReady other) {
        if (other == global::com.zyd.common.proto.client.PlayerNotReady.DefaultInstance) return this;
        PrepareBuilder();
        if (other.userId_.Count != 0) {
          result.userId_.Add(other.userId_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerNotReadyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerNotReadyFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.userId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<int> UserIdList {
        get { return PrepareBuilder().userId_; }
      }
      public int UserIdCount {
        get { return result.UserIdCount; }
      }
      public int GetUserId(int index) {
        return result.GetUserId(index);
      }
      public Builder SetUserId(int index, int value) {
        PrepareBuilder();
        result.userId_[index] = value;
        return this;
      }
      public Builder AddUserId(int value) {
        PrepareBuilder();
        result.userId_.Add(value);
        return this;
      }
      public Builder AddRangeUserId(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.userId_.Add(values);
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.userId_.Clear();
        return this;
      }
    }
    static PlayerNotReady() {
      object.ReferenceEquals(global::com.zyd.common.proto.client.WarChess.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
